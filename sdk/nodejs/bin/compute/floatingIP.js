"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * Manages a V2 floating IP resource within OpenStack Nova (compute)
 * that can be used for compute instances.
 *
 * Please note that managing floating IPs through the OpenStack Compute API has
 * been deprecated. Unless you are using an older OpenStack environment, it is
 * recommended to use the [`openstack_networking_floatingip_v2`](networking_floatingip_v2.html)
 * resource instead, which uses the OpenStack Networking API.
 */
class FloatingIP extends pulumi.CustomResource {
    /**
     * Get an existing FloatingIP resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state) {
        return new FloatingIP(name, state, { id });
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["address"] = state ? state.address : undefined;
            inputs["fixedIp"] = state ? state.fixedIp : undefined;
            inputs["instanceId"] = state ? state.instanceId : undefined;
            inputs["pool"] = state ? state.pool : undefined;
            inputs["region"] = state ? state.region : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.pool === undefined) {
                throw new Error("Missing required property 'pool'");
            }
            inputs["pool"] = args ? args.pool : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["address"] = undefined /*out*/;
            inputs["fixedIp"] = undefined /*out*/;
            inputs["instanceId"] = undefined /*out*/;
        }
        super("openstack:compute/floatingIP:FloatingIP", name, inputs, opts);
    }
}
exports.FloatingIP = FloatingIP;
//# sourceMappingURL=floatingIP.js.map