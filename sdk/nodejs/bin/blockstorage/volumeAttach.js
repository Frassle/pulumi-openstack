"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
/**
 * This resource is experimental and may be removed in the future! Feedback
 * is requested if you find this resource useful or if you find any problems
 * with it.
 *
 * Creates a general purpose attachment connection to a Block
 * Storage volume using the OpenStack Block Storage (Cinder) v3 API.
 * Depending on your Block Storage service configuration, this
 * resource can assist in attaching a volume to a non-OpenStack resource
 * such as a bare-metal server or a remote virtual machine in a
 * different cloud provider.
 *
 * This does not actually attach a volume to an instance. Please use
 * the `openstack_compute_volume_attach_v3` resource for that.
 */
class VolumeAttach extends pulumi.CustomResource {
    /**
     * Get an existing VolumeAttach resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state) {
        return new VolumeAttach(name, state, { id });
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["attachMode"] = state ? state.attachMode : undefined;
            inputs["data"] = state ? state.data : undefined;
            inputs["device"] = state ? state.device : undefined;
            inputs["driverVolumeType"] = state ? state.driverVolumeType : undefined;
            inputs["hostName"] = state ? state.hostName : undefined;
            inputs["initiator"] = state ? state.initiator : undefined;
            inputs["ipAddress"] = state ? state.ipAddress : undefined;
            inputs["mountPointBase"] = state ? state.mountPointBase : undefined;
            inputs["multipath"] = state ? state.multipath : undefined;
            inputs["osType"] = state ? state.osType : undefined;
            inputs["platform"] = state ? state.platform : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["volumeId"] = state ? state.volumeId : undefined;
            inputs["wwnn"] = state ? state.wwnn : undefined;
            inputs["wwpns"] = state ? state.wwpns : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.hostName === undefined) {
                throw new Error("Missing required property 'hostName'");
            }
            if (!args || args.volumeId === undefined) {
                throw new Error("Missing required property 'volumeId'");
            }
            inputs["attachMode"] = args ? args.attachMode : undefined;
            inputs["device"] = args ? args.device : undefined;
            inputs["hostName"] = args ? args.hostName : undefined;
            inputs["initiator"] = args ? args.initiator : undefined;
            inputs["ipAddress"] = args ? args.ipAddress : undefined;
            inputs["multipath"] = args ? args.multipath : undefined;
            inputs["osType"] = args ? args.osType : undefined;
            inputs["platform"] = args ? args.platform : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["volumeId"] = args ? args.volumeId : undefined;
            inputs["wwnn"] = args ? args.wwnn : undefined;
            inputs["wwpns"] = args ? args.wwpns : undefined;
            inputs["data"] = undefined /*out*/;
            inputs["driverVolumeType"] = undefined /*out*/;
            inputs["mountPointBase"] = undefined /*out*/;
        }
        super("openstack:blockstorage/volumeAttach:VolumeAttach", name, inputs, opts);
    }
}
exports.VolumeAttach = VolumeAttach;
//# sourceMappingURL=volumeAttach.js.map