// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Openstack.Compute {

	/// <summary>
	/// A collection of arguments for invoking getFlavor.
	/// </summary>
	public struct GetFlavorArgs {
		/// <summary>
		/// The exact amount of disk (in gigabytes).
		/// </summary>
		public int Disk { get; set; }

		/// <summary>
		/// The minimum amount of disk (in gigabytes).
		/// </summary>
		public int MinDisk { get; set; }

		/// <summary>
		/// The minimum amount of RAM (in megabytes).
		/// </summary>
		public int MinRam { get; set; }

		/// <summary>
		/// The name of the flavor.
		/// </summary>
		public string Name { get; set; }

		/// <summary>
		/// The exact amount of RAM (in megabytes).
		/// </summary>
		public int Ram { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Compute client.
		/// If omitted, the `region` argument of the provider is used.
		/// </summary>
		public string Region { get; set; }

		/// <summary>
		/// The `rx_tx_factor` of the flavor.
		/// </summary>
		public double RxTxFactor { get; set; }

		/// <summary>
		/// The amount of swap (in gigabytes).
		/// </summary>
		public int Swap { get; set; }

		/// <summary>
		/// The amount of VCPUs.
		/// </summary>
		public int Vcpus { get; set; }

	} // GetFlavorArgs

	/// <summary>
	/// A collection of values returned by getFlavor.
	/// </summary>
	public struct GetFlavorResult {
		/// <summary>
		/// Whether the flavor is public or private.
		/// </summary>
		public bool IsPublic { get; set; }

		public string Region { get; set; }

		/// <summary>
		/// id is the provider-assigned unique ID for this managed resource.
		/// </summary>
		public string Id { get; set; }

	} // GetFlavorResult

	public static partial class ComputeModule {
		/// <summary>
		/// Use this data source to get the ID of an available OpenStack flavor.
		/// </summary>
		public static System.Threading.Tasks.Task<GetFlavorResult> GetFlavor(GetFlavorArgs args, Pulumi.InvokeOptions opts = default(Pulumi.InvokeOptions)) {
			var invokeArgs = new Google.Protobuf.WellKnownTypes.Struct();
			invokeArgs.Fields["disk"] = Protobuf.ToProtobuf(args.Disk);
			invokeArgs.Fields["minDisk"] = Protobuf.ToProtobuf(args.MinDisk);
			invokeArgs.Fields["minRam"] = Protobuf.ToProtobuf(args.MinRam);
			invokeArgs.Fields["name"] = Protobuf.ToProtobuf(args.Name);
			invokeArgs.Fields["ram"] = Protobuf.ToProtobuf(args.Ram);
			invokeArgs.Fields["region"] = Protobuf.ToProtobuf(args.Region);
			invokeArgs.Fields["rxTxFactor"] = Protobuf.ToProtobuf(args.RxTxFactor);
			invokeArgs.Fields["swap"] = Protobuf.ToProtobuf(args.Swap);
			invokeArgs.Fields["vcpus"] = Protobuf.ToProtobuf(args.Vcpus);

			var task = Pulumi.Runtime.InvokeAsync("openstack:compute/getFlavor:getFlavor", invokeArgs, opts);

			return task.ContinueWith(response => {
				var protobuf = response.Result;
				var result = new GetFlavorResult();
				if (protobuf.Fields.ContainsKey("isPublic")) {
					result.IsPublic = Protobuf.ToBool(protobuf.Fields["isPublic"]);
				}
				if (protobuf.Fields.ContainsKey("region")) {
					result.Region = Protobuf.ToString(protobuf.Fields["region"]);
				}
				if (protobuf.Fields.ContainsKey("id")) {
					result.Id = Protobuf.ToString(protobuf.Fields["id"]);
				}
				return result;
			});
		} // GetFlavor

	} // ComputeModule
} // Pulumi.Openstack.Compute
