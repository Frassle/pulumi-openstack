// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Openstack.Compute {

	/// <summary>
	/// The set of arguments for constructing a Keypair resource.
	/// </summary>
	public struct KeypairArgs {
		/// <summary>
		/// A unique name for the keypair. Changing this creates a new
		/// keypair.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// A pregenerated OpenSSH-formatted public key.
		/// Changing this creates a new keypair. If a public key is not specified, then
		/// a public/private key pair will be automatically generated. If a pair is
		/// created, then destroying this resource means you will lose access to that
		/// keypair forever.
		/// </summary>
		public Pulumi.IO<string> PublicKey { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Compute client.
		/// Keypairs are associated with accounts, but a Compute client is needed to
		/// create one. If omitted, the `region` argument of the provider is used.
		/// Changing this creates a new keypair.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// Map of additional options.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> ValueSpecs { get; set; }

	} // KeypairArgs

	/// <summary>
	/// Manages a V2 keypair resource within OpenStack.
	/// 
	/// ~> **Important Security Notice** The private key generated by this resource will
	/// be stored *unencrypted* in your Terraform state file. **Use of this resource
	/// for production deployments is *not* recommended**. Instead, generate
	/// a private key file outside of Terraform and distribute it securely
	/// to the system where Terraform will be run.
	/// </summary>
	public class Keypair : Pulumi.CustomResource {
		/// <summary>
		/// The fingerprint of the public key.
		/// </summary>
		public Pulumi.IO<string> Fingerprint { get; set; }

		/// <summary>
		/// A unique name for the keypair. Changing this creates a new
		/// keypair.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The generated private key when no public key is specified.
		/// </summary>
		public Pulumi.IO<string> PrivateKey { get; set; }

		/// <summary>
		/// A pregenerated OpenSSH-formatted public key.
		/// Changing this creates a new keypair. If a public key is not specified, then
		/// a public/private key pair will be automatically generated. If a pair is
		/// created, then destroying this resource means you will lose access to that
		/// keypair forever.
		/// </summary>
		public Pulumi.IO<string> PublicKey { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Compute client.
		/// Keypairs are associated with accounts, but a Compute client is needed to
		/// create one. If omitted, the `region` argument of the provider is used.
		/// Changing this creates a new keypair.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// Map of additional options.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> ValueSpecs { get; set; }

		public Keypair(string name, KeypairArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("openstack:compute/keypair:Keypair", name, SerialiseArgs(args), opts) {
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			PublicKey = Outputs["publicKey"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			ValueSpecs = Outputs["valueSpecs"].Select(item => Protobuf.ToMap(item));
			Fingerprint = Outputs["fingerprint"].Select(item => Protobuf.ToString(item));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			PrivateKey = Outputs["privateKey"].Select(item => Protobuf.ToString(item));
			PublicKey = Outputs["publicKey"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			ValueSpecs = Outputs["valueSpecs"].Select(item => Protobuf.ToMap(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(KeypairArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["publicKey"] = Protobuf.ToProtobuf(args.PublicKey);
			props["region"] = Protobuf.ToProtobuf(args.Region);
			props["valueSpecs"] = Protobuf.ToProtobuf(args.ValueSpecs);
			props["fingerprint"] = null; //out
			props["privateKey"] = null; //out
			return props;
		} // SerialiseArgs

	} // Keypair
} // Pulumi.Openstack.Compute
