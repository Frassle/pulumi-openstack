// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Openstack.Compute {

	public sealed class InstanceArgsBlockDevice : Pulumi.IIOProtobuf {
		public Pulumi.IO<int> BootIndex { get; set; }
		public Pulumi.IO<bool> DeleteOnTermination { get; set; }
		public Pulumi.IO<string> DestinationType { get; set; }
		public Pulumi.IO<string> GuestFormat { get; set; }
		public Pulumi.IO<string> SourceType { get; set; }
		public Pulumi.IO<string> Uuid { get; set; }
		public Pulumi.IO<int> VolumeSize { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Pulumi.Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("boot_index", Protobuf.ToProtobuf(BootIndex)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("delete_on_termination", Protobuf.ToProtobuf(DeleteOnTermination)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("destination_type", Protobuf.ToProtobuf(DestinationType)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("guest_format", Protobuf.ToProtobuf(GuestFormat)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("source_type", Protobuf.ToProtobuf(SourceType)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("uuid", Protobuf.ToProtobuf(Uuid)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("volume_size", Protobuf.ToProtobuf(VolumeSize)));
		} // ToProtobuf

	} // InstanceArgsBlockDevice

	public sealed class InstanceArgsNetwork : Pulumi.IIOProtobuf {
		public Pulumi.IO<bool> AccessNetwork { get; set; }
		public Pulumi.IO<string> FixedIpV4 { get; set; }
		public Pulumi.IO<string> FixedIpV6 { get; set; }
		public Pulumi.IO<string> Mac { get; set; }
		public Pulumi.IO<string> Name { get; set; }
		public Pulumi.IO<string> Port { get; set; }
		public Pulumi.IO<string> Uuid { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Pulumi.Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("access_network", Protobuf.ToProtobuf(AccessNetwork)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("fixed_ip_v4", Protobuf.ToProtobuf(FixedIpV4)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("fixed_ip_v6", Protobuf.ToProtobuf(FixedIpV6)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("mac", Protobuf.ToProtobuf(Mac)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("name", Protobuf.ToProtobuf(Name)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("port", Protobuf.ToProtobuf(Port)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("uuid", Protobuf.ToProtobuf(Uuid)));
		} // ToProtobuf

	} // InstanceArgsNetwork

	public sealed class InstanceArgsPersonality : Pulumi.IIOProtobuf {
		public Pulumi.IO<string> Content { get; set; }
		public Pulumi.IO<string> File { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Pulumi.Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("content", Protobuf.ToProtobuf(Content)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("file", Protobuf.ToProtobuf(File)));
		} // ToProtobuf

	} // InstanceArgsPersonality

	public sealed class InstanceArgsSchedulerHint : Pulumi.IIOProtobuf {
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> AdditionalProperties { get; set; }
		public Pulumi.IO<string> BuildNearHostIp { get; set; }
		public Pulumi.IO<Pulumi.IO<string>[]> DifferentHost { get; set; }
		public Pulumi.IO<string> Group { get; set; }
		public Pulumi.IO<Pulumi.IO<string>[]> Query { get; set; }
		public Pulumi.IO<Pulumi.IO<string>[]> SameHost { get; set; }
		public Pulumi.IO<string> TargetCell { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Pulumi.Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("additional_properties", Protobuf.ToProtobuf(AdditionalProperties)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("build_near_host_ip", Protobuf.ToProtobuf(BuildNearHostIp)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("different_host", Protobuf.ToProtobuf(DifferentHost, item => Protobuf.ToProtobuf(item))),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("group", Protobuf.ToProtobuf(Group)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("query", Protobuf.ToProtobuf(Query, item => Protobuf.ToProtobuf(item))),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("same_host", Protobuf.ToProtobuf(SameHost, item => Protobuf.ToProtobuf(item))),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("target_cell", Protobuf.ToProtobuf(TargetCell)));
		} // ToProtobuf

	} // InstanceArgsSchedulerHint

	public sealed class InstanceBlockDevice : Pulumi.IIOProtobuf {
		public Pulumi.IO<int> BootIndex { get; set; }
		public Pulumi.IO<bool> DeleteOnTermination { get; set; }
		public Pulumi.IO<string> DestinationType { get; set; }
		public Pulumi.IO<string> GuestFormat { get; set; }
		public Pulumi.IO<string> SourceType { get; set; }
		public Pulumi.IO<string> Uuid { get; set; }
		public Pulumi.IO<int> VolumeSize { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Pulumi.Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("boot_index", Protobuf.ToProtobuf(BootIndex)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("delete_on_termination", Protobuf.ToProtobuf(DeleteOnTermination)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("destination_type", Protobuf.ToProtobuf(DestinationType)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("guest_format", Protobuf.ToProtobuf(GuestFormat)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("source_type", Protobuf.ToProtobuf(SourceType)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("uuid", Protobuf.ToProtobuf(Uuid)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("volume_size", Protobuf.ToProtobuf(VolumeSize)));
		} // ToProtobuf

		public static InstanceBlockDevice FromProtobuf(Google.Protobuf.WellKnownTypes.Value value) {
			var obj = value.StructValue;
			return new InstanceBlockDevice() {
				BootIndex = Protobuf.ToInt(obj.Fields["boot_index"]),
				DeleteOnTermination = Protobuf.ToBool(obj.Fields["delete_on_termination"]),
				DestinationType = Protobuf.ToString(obj.Fields["destination_type"]),
				GuestFormat = Protobuf.ToString(obj.Fields["guest_format"]),
				SourceType = Protobuf.ToString(obj.Fields["source_type"]),
				Uuid = Protobuf.ToString(obj.Fields["uuid"]),
				VolumeSize = Protobuf.ToInt(obj.Fields["volume_size"]),
			};
		} // FromProtobuf

	} // InstanceBlockDevice

	public sealed class InstanceNetwork : Pulumi.IIOProtobuf {
		public Pulumi.IO<bool> AccessNetwork { get; set; }
		public Pulumi.IO<string> FixedIpV4 { get; set; }
		public Pulumi.IO<string> FixedIpV6 { get; set; }
		public Pulumi.IO<string> Mac { get; set; }
		public Pulumi.IO<string> Name { get; set; }
		public Pulumi.IO<string> Port { get; set; }
		public Pulumi.IO<string> Uuid { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Pulumi.Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("access_network", Protobuf.ToProtobuf(AccessNetwork)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("fixed_ip_v4", Protobuf.ToProtobuf(FixedIpV4)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("fixed_ip_v6", Protobuf.ToProtobuf(FixedIpV6)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("mac", Protobuf.ToProtobuf(Mac)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("name", Protobuf.ToProtobuf(Name)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("port", Protobuf.ToProtobuf(Port)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("uuid", Protobuf.ToProtobuf(Uuid)));
		} // ToProtobuf

		public static InstanceNetwork FromProtobuf(Google.Protobuf.WellKnownTypes.Value value) {
			var obj = value.StructValue;
			return new InstanceNetwork() {
				AccessNetwork = Protobuf.ToBool(obj.Fields["access_network"]),
				FixedIpV4 = Protobuf.ToString(obj.Fields["fixed_ip_v4"]),
				FixedIpV6 = Protobuf.ToString(obj.Fields["fixed_ip_v6"]),
				Mac = Protobuf.ToString(obj.Fields["mac"]),
				Name = Protobuf.ToString(obj.Fields["name"]),
				Port = Protobuf.ToString(obj.Fields["port"]),
				Uuid = Protobuf.ToString(obj.Fields["uuid"]),
			};
		} // FromProtobuf

	} // InstanceNetwork

	public sealed class InstancePersonality : Pulumi.IIOProtobuf {
		public Pulumi.IO<string> Content { get; set; }
		public Pulumi.IO<string> File { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Pulumi.Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("content", Protobuf.ToProtobuf(Content)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("file", Protobuf.ToProtobuf(File)));
		} // ToProtobuf

		public static InstancePersonality FromProtobuf(Google.Protobuf.WellKnownTypes.Value value) {
			var obj = value.StructValue;
			return new InstancePersonality() {
				Content = Protobuf.ToString(obj.Fields["content"]),
				File = Protobuf.ToString(obj.Fields["file"]),
			};
		} // FromProtobuf

	} // InstancePersonality

	public sealed class InstanceSchedulerHint : Pulumi.IIOProtobuf {
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> AdditionalProperties { get; set; }
		public Pulumi.IO<string> BuildNearHostIp { get; set; }
		public Pulumi.IO<string[]> DifferentHost { get; set; }
		public Pulumi.IO<string> Group { get; set; }
		public Pulumi.IO<string[]> Query { get; set; }
		public Pulumi.IO<string[]> SameHost { get; set; }
		public Pulumi.IO<string> TargetCell { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Pulumi.Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("additional_properties", Protobuf.ToProtobuf(AdditionalProperties)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("build_near_host_ip", Protobuf.ToProtobuf(BuildNearHostIp)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("different_host", Protobuf.ToProtobuf(DifferentHost, item => Protobuf.ToProtobuf(item))),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("group", Protobuf.ToProtobuf(Group)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("query", Protobuf.ToProtobuf(Query, item => Protobuf.ToProtobuf(item))),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("same_host", Protobuf.ToProtobuf(SameHost, item => Protobuf.ToProtobuf(item))),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("target_cell", Protobuf.ToProtobuf(TargetCell)));
		} // ToProtobuf

		public static InstanceSchedulerHint FromProtobuf(Google.Protobuf.WellKnownTypes.Value value) {
			var obj = value.StructValue;
			return new InstanceSchedulerHint() {
				AdditionalProperties = Protobuf.ToMap(obj.Fields["additional_properties"]),
				BuildNearHostIp = Protobuf.ToString(obj.Fields["build_near_host_ip"]),
				DifferentHost = Protobuf.ToList(obj.Fields["different_host"], item => Protobuf.ToString(item)),
				Group = Protobuf.ToString(obj.Fields["group"]),
				Query = Protobuf.ToList(obj.Fields["query"], item => Protobuf.ToString(item)),
				SameHost = Protobuf.ToList(obj.Fields["same_host"], item => Protobuf.ToString(item)),
				TargetCell = Protobuf.ToString(obj.Fields["target_cell"]),
			};
		} // FromProtobuf

	} // InstanceSchedulerHint

	/// <summary>
	/// The set of arguments for constructing a Instance resource.
	/// </summary>
	public struct InstanceArgs {
		/// <summary>
		/// The first detected Fixed IPv4 address _or_ the
		/// Floating IP.
		/// </summary>
		public Pulumi.IO<string> AccessIpV4 { get; set; }

		/// <summary>
		/// The first detected Fixed IPv6 address.
		/// </summary>
		public Pulumi.IO<string> AccessIpV6 { get; set; }

		/// <summary>
		/// The administrative password to assign to the server.
		/// Changing this changes the root password on the existing server.
		/// </summary>
		public Pulumi.IO<string> AdminPass { get; set; }

		/// <summary>
		/// The availability zone in which to create
		/// the server. Changing this creates a new server.
		/// </summary>
		public Pulumi.IO<string> AvailabilityZone { get; set; }

		/// <summary>
		/// Configuration of block devices. The block_device
		/// structure is documented below. Changing this creates a new server.
		/// You can specify multiple block devices which will create an instance with
		/// multiple disks. This configuration is very flexible, so please see the
		/// following [reference](http://docs.openstack.org/developer/nova/block_device_mapping.html)
		/// for more information.
		/// </summary>
		public Pulumi.IO<Pulumi.IO<InstanceArgsBlockDevice>[]> BlockDevices { get; set; }

		/// <summary>
		/// Whether to use the config_drive feature to
		/// configure the instance. Changing this creates a new server.
		/// </summary>
		public Pulumi.IO<bool> ConfigDrive { get; set; }

		/// <summary>
		/// The flavor ID of
		/// the desired flavor for the server. Changing this resizes the existing server.
		/// </summary>
		public Pulumi.IO<string> FlavorId { get; set; }

		/// <summary>
		/// The name of the
		/// desired flavor for the server. Changing this resizes the existing server.
		/// </summary>
		public Pulumi.IO<string> FlavorName { get; set; }

		/// <summary>
		/// Whether to force the OpenStack instance to be
		/// forcefully deleted. This is useful for environments that have reclaim / soft
		/// deletion enabled.
		/// </summary>
		public Pulumi.IO<bool> ForceDelete { get; set; }

		/// <summary>
		/// (Optional; Required if `image_name` is empty and not booting
		/// from a volume. Do not specify if booting from a volume.) The image ID of
		/// the desired image for the server. Changing this creates a new server.
		/// </summary>
		public Pulumi.IO<string> ImageId { get; set; }

		/// <summary>
		/// (Optional; Required if `image_id` is empty and not booting
		/// from a volume. Do not specify if booting from a volume.) The name of the
		/// desired image for the server. Changing this creates a new server.
		/// </summary>
		public Pulumi.IO<string> ImageName { get; set; }

		/// <summary>
		/// The name of a key pair to put on the server. The key
		/// pair must already be created and associated with the tenant's account.
		/// Changing this creates a new server.
		/// </summary>
		public Pulumi.IO<string> KeyPair { get; set; }

		/// <summary>
		/// Metadata key/value pairs to make available from
		/// within the instance. Changing this updates the existing server metadata.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> Metadata { get; set; }

		/// <summary>
		/// A unique name for the resource.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// An array of one or more networks to attach to the
		/// instance. The network object structure is documented below. Changing this
		/// creates a new server.
		/// </summary>
		public Pulumi.IO<Pulumi.IO<InstanceArgsNetwork>[]> Networks { get; set; }

		/// <summary>
		/// Customize the personality of an instance by
		/// defining one or more files and their contents. The personality structure
		/// is described below.
		/// </summary>
		public Pulumi.IO<Pulumi.IO<InstanceArgsPersonality>[]> Personalities { get; set; }

		/// <summary>
		/// Provide the VM state. Only 'active' and 'shutoff'
		/// are supported values. *Note*: If the initial power_state is the shutoff
		/// the VM will be stopped immediately after build and the provisioners like
		/// remote-exec or files are not supported.
		/// </summary>
		public Pulumi.IO<string> PowerState { get; set; }

		/// <summary>
		/// The region in which to create the server instance. If
		/// omitted, the `region` argument of the provider is used. Changing this
		/// creates a new server.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// Provide the Nova scheduler with hints on how
		/// the instance should be launched. The available hints are described below.
		/// </summary>
		public Pulumi.IO<Pulumi.IO<InstanceArgsSchedulerHint>[]> SchedulerHints { get; set; }

		/// <summary>
		/// An array of one or more security group names
		/// to associate with the server. Changing this results in adding/removing
		/// security groups from the existing server. *Note*: When attaching the
		/// instance to networks using Ports, place the security groups on the Port
		/// and not the instance.
		/// </summary>
		public Pulumi.IO<Pulumi.IO<string>[]> SecurityGroups { get; set; }

		/// <summary>
		/// Whether to try stop instance gracefully
		/// before destroying it, thus giving chance for guest OS daemons to stop correctly.
		/// If instance doesn't stop within timeout, it will be destroyed anyway.
		/// </summary>
		public Pulumi.IO<bool> StopBeforeDestroy { get; set; }

		/// <summary>
		/// The user data to provide when launching the instance.
		/// Changing this creates a new server.
		/// </summary>
		public Pulumi.IO<string> UserData { get; set; }

	} // InstanceArgs

	/// <summary>
	/// Manages a V2 VM instance resource within OpenStack.
	/// </summary>
	public class Instance : Pulumi.CustomResource {
		/// <summary>
		/// The first detected Fixed IPv4 address _or_ the
		/// Floating IP.
		/// </summary>
		public Pulumi.IO<string> AccessIpV4 { get; set; }

		/// <summary>
		/// The first detected Fixed IPv6 address.
		/// </summary>
		public Pulumi.IO<string> AccessIpV6 { get; set; }

		/// <summary>
		/// The administrative password to assign to the server.
		/// Changing this changes the root password on the existing server.
		/// </summary>
		public Pulumi.IO<string> AdminPass { get; set; }

		/// <summary>
		/// Contains all instance metadata, even metadata not set
		/// by Terraform.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> AllMetadata { get; set; }

		/// <summary>
		/// The availability zone in which to create
		/// the server. Changing this creates a new server.
		/// </summary>
		public Pulumi.IO<string> AvailabilityZone { get; set; }

		/// <summary>
		/// Configuration of block devices. The block_device
		/// structure is documented below. Changing this creates a new server.
		/// You can specify multiple block devices which will create an instance with
		/// multiple disks. This configuration is very flexible, so please see the
		/// following [reference](http://docs.openstack.org/developer/nova/block_device_mapping.html)
		/// for more information.
		/// </summary>
		public Pulumi.IO<InstanceBlockDevice[]> BlockDevices { get; set; }

		/// <summary>
		/// Whether to use the config_drive feature to
		/// configure the instance. Changing this creates a new server.
		/// </summary>
		public Pulumi.IO<bool> ConfigDrive { get; set; }

		/// <summary>
		/// The flavor ID of
		/// the desired flavor for the server. Changing this resizes the existing server.
		/// </summary>
		public Pulumi.IO<string> FlavorId { get; set; }

		/// <summary>
		/// The name of the
		/// desired flavor for the server. Changing this resizes the existing server.
		/// </summary>
		public Pulumi.IO<string> FlavorName { get; set; }

		/// <summary>
		/// Whether to force the OpenStack instance to be
		/// forcefully deleted. This is useful for environments that have reclaim / soft
		/// deletion enabled.
		/// </summary>
		public Pulumi.IO<bool> ForceDelete { get; set; }

		/// <summary>
		/// (Optional; Required if `image_name` is empty and not booting
		/// from a volume. Do not specify if booting from a volume.) The image ID of
		/// the desired image for the server. Changing this creates a new server.
		/// </summary>
		public Pulumi.IO<string> ImageId { get; set; }

		/// <summary>
		/// (Optional; Required if `image_id` is empty and not booting
		/// from a volume. Do not specify if booting from a volume.) The name of the
		/// desired image for the server. Changing this creates a new server.
		/// </summary>
		public Pulumi.IO<string> ImageName { get; set; }

		/// <summary>
		/// The name of a key pair to put on the server. The key
		/// pair must already be created and associated with the tenant's account.
		/// Changing this creates a new server.
		/// </summary>
		public Pulumi.IO<string> KeyPair { get; set; }

		/// <summary>
		/// Metadata key/value pairs to make available from
		/// within the instance. Changing this updates the existing server metadata.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> Metadata { get; set; }

		/// <summary>
		/// A unique name for the resource.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// An array of one or more networks to attach to the
		/// instance. The network object structure is documented below. Changing this
		/// creates a new server.
		/// </summary>
		public Pulumi.IO<InstanceNetwork[]> Networks { get; set; }

		/// <summary>
		/// Customize the personality of an instance by
		/// defining one or more files and their contents. The personality structure
		/// is described below.
		/// </summary>
		public Pulumi.IO<InstancePersonality[]> Personalities { get; set; }

		/// <summary>
		/// Provide the VM state. Only 'active' and 'shutoff'
		/// are supported values. *Note*: If the initial power_state is the shutoff
		/// the VM will be stopped immediately after build and the provisioners like
		/// remote-exec or files are not supported.
		/// </summary>
		public Pulumi.IO<string> PowerState { get; set; }

		/// <summary>
		/// The region in which to create the server instance. If
		/// omitted, the `region` argument of the provider is used. Changing this
		/// creates a new server.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// Provide the Nova scheduler with hints on how
		/// the instance should be launched. The available hints are described below.
		/// </summary>
		public Pulumi.IO<InstanceSchedulerHint[]> SchedulerHints { get; set; }

		/// <summary>
		/// An array of one or more security group names
		/// to associate with the server. Changing this results in adding/removing
		/// security groups from the existing server. *Note*: When attaching the
		/// instance to networks using Ports, place the security groups on the Port
		/// and not the instance.
		/// </summary>
		public Pulumi.IO<string[]> SecurityGroups { get; set; }

		/// <summary>
		/// Whether to try stop instance gracefully
		/// before destroying it, thus giving chance for guest OS daemons to stop correctly.
		/// If instance doesn't stop within timeout, it will be destroyed anyway.
		/// </summary>
		public Pulumi.IO<bool> StopBeforeDestroy { get; set; }

		/// <summary>
		/// The user data to provide when launching the instance.
		/// Changing this creates a new server.
		/// </summary>
		public Pulumi.IO<string> UserData { get; set; }

		public Instance(string name, InstanceArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("openstack:compute/instance:Instance", name, SerialiseArgs(args), opts) {
			AccessIpV4 = Outputs["accessIpV4"].Select(item => Protobuf.ToString(item));
			AccessIpV6 = Outputs["accessIpV6"].Select(item => Protobuf.ToString(item));
			AdminPass = Outputs["adminPass"].Select(item => Protobuf.ToString(item));
			AvailabilityZone = Outputs["availabilityZone"].Select(item => Protobuf.ToString(item));
			BlockDevices = Outputs["blockDevices"].Select(item => Protobuf.ToList(item, item1 => InstanceBlockDevice.FromProtobuf(item1)));
			ConfigDrive = Outputs["configDrive"].Select(item => Protobuf.ToBool(item));
			FlavorId = Outputs["flavorId"].Select(item => Protobuf.ToString(item));
			FlavorName = Outputs["flavorName"].Select(item => Protobuf.ToString(item));
			ForceDelete = Outputs["forceDelete"].Select(item => Protobuf.ToBool(item));
			ImageId = Outputs["imageId"].Select(item => Protobuf.ToString(item));
			ImageName = Outputs["imageName"].Select(item => Protobuf.ToString(item));
			KeyPair = Outputs["keyPair"].Select(item => Protobuf.ToString(item));
			Metadata = Outputs["metadata"].Select(item => Protobuf.ToMap(item));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Networks = Outputs["networks"].Select(item => Protobuf.ToList(item, item1 => InstanceNetwork.FromProtobuf(item1)));
			Personalities = Outputs["personalities"].Select(item => Protobuf.ToList(item, item1 => InstancePersonality.FromProtobuf(item1)));
			PowerState = Outputs["powerState"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			SchedulerHints = Outputs["schedulerHints"].Select(item => Protobuf.ToList(item, item1 => InstanceSchedulerHint.FromProtobuf(item1)));
			SecurityGroups = Outputs["securityGroups"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			StopBeforeDestroy = Outputs["stopBeforeDestroy"].Select(item => Protobuf.ToBool(item));
			UserData = Outputs["userData"].Select(item => Protobuf.ToString(item));
			AccessIpV4 = Outputs["accessIpV4"].Select(item => Protobuf.ToString(item));
			AccessIpV6 = Outputs["accessIpV6"].Select(item => Protobuf.ToString(item));
			AdminPass = Outputs["adminPass"].Select(item => Protobuf.ToString(item));
			AllMetadata = Outputs["allMetadata"].Select(item => Protobuf.ToMap(item));
			AvailabilityZone = Outputs["availabilityZone"].Select(item => Protobuf.ToString(item));
			BlockDevices = Outputs["blockDevices"].Select(item => Protobuf.ToList(item, item1 => InstanceBlockDevice.FromProtobuf(item1)));
			ConfigDrive = Outputs["configDrive"].Select(item => Protobuf.ToBool(item));
			FlavorId = Outputs["flavorId"].Select(item => Protobuf.ToString(item));
			FlavorName = Outputs["flavorName"].Select(item => Protobuf.ToString(item));
			ForceDelete = Outputs["forceDelete"].Select(item => Protobuf.ToBool(item));
			ImageId = Outputs["imageId"].Select(item => Protobuf.ToString(item));
			ImageName = Outputs["imageName"].Select(item => Protobuf.ToString(item));
			KeyPair = Outputs["keyPair"].Select(item => Protobuf.ToString(item));
			Metadata = Outputs["metadata"].Select(item => Protobuf.ToMap(item));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Networks = Outputs["networks"].Select(item => Protobuf.ToList(item, item1 => InstanceNetwork.FromProtobuf(item1)));
			Personalities = Outputs["personalities"].Select(item => Protobuf.ToList(item, item1 => InstancePersonality.FromProtobuf(item1)));
			PowerState = Outputs["powerState"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			SchedulerHints = Outputs["schedulerHints"].Select(item => Protobuf.ToList(item, item1 => InstanceSchedulerHint.FromProtobuf(item1)));
			SecurityGroups = Outputs["securityGroups"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			StopBeforeDestroy = Outputs["stopBeforeDestroy"].Select(item => Protobuf.ToBool(item));
			UserData = Outputs["userData"].Select(item => Protobuf.ToString(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(InstanceArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["accessIpV4"] = Protobuf.ToProtobuf(args.AccessIpV4);
			props["accessIpV6"] = Protobuf.ToProtobuf(args.AccessIpV6);
			props["adminPass"] = Protobuf.ToProtobuf(args.AdminPass);
			props["availabilityZone"] = Protobuf.ToProtobuf(args.AvailabilityZone);
			props["blockDevices"] = Protobuf.ToProtobuf(args.BlockDevices, item => Protobuf.ToProtobuf(item));
			props["configDrive"] = Protobuf.ToProtobuf(args.ConfigDrive);
			props["flavorId"] = Protobuf.ToProtobuf(args.FlavorId);
			props["flavorName"] = Protobuf.ToProtobuf(args.FlavorName);
			props["forceDelete"] = Protobuf.ToProtobuf(args.ForceDelete);
			props["imageId"] = Protobuf.ToProtobuf(args.ImageId);
			props["imageName"] = Protobuf.ToProtobuf(args.ImageName);
			props["keyPair"] = Protobuf.ToProtobuf(args.KeyPair);
			props["metadata"] = Protobuf.ToProtobuf(args.Metadata);
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["networks"] = Protobuf.ToProtobuf(args.Networks, item => Protobuf.ToProtobuf(item));
			props["personalities"] = Protobuf.ToProtobuf(args.Personalities, item => Protobuf.ToProtobuf(item));
			props["powerState"] = Protobuf.ToProtobuf(args.PowerState);
			props["region"] = Protobuf.ToProtobuf(args.Region);
			props["schedulerHints"] = Protobuf.ToProtobuf(args.SchedulerHints, item => Protobuf.ToProtobuf(item));
			props["securityGroups"] = Protobuf.ToProtobuf(args.SecurityGroups, item => Protobuf.ToProtobuf(item));
			props["stopBeforeDestroy"] = Protobuf.ToProtobuf(args.StopBeforeDestroy);
			props["userData"] = Protobuf.ToProtobuf(args.UserData);
			props["allMetadata"] = null; //out
			return props;
		} // SerialiseArgs

	} // Instance
} // Pulumi.Openstack.Compute
