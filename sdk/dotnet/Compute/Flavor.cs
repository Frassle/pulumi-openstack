// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Openstack.Compute {

	/// <summary>
	/// The set of arguments for constructing a Flavor resource.
	/// </summary>
	public struct FlavorArgs {
		/// <summary>
		/// The amount of disk space in gigabytes to use for the root
		/// (/) partition. Changing this creates a new flavor.
		/// </summary>
		public Pulumi.IO<int> Disk { get; set; }

		public Pulumi.IO<int> Ephemeral { get; set; }

		/// <summary>
		/// Key/Value pairs of metadata for the flavor.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> ExtraSpecs { get; set; }

		/// <summary>
		/// Whether the flavor is public. Changing this creates
		/// a new flavor.
		/// </summary>
		public Pulumi.IO<bool> IsPublic { get; set; }

		/// <summary>
		/// A unique name for the flavor. Changing this creates a new
		/// flavor.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The amount of RAM to use, in megabytes. Changing this
		/// creates a new flavor.
		/// </summary>
		public Pulumi.IO<int> Ram { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Compute client.
		/// Flavors are associated with accounts, but a Compute client is needed to
		/// create one. If omitted, the `region` argument of the provider is used.
		/// Changing this creates a new flavor.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// RX/TX bandwith factor. The default is 1. Changing
		/// this creates a new flavor.
		/// </summary>
		public Pulumi.IO<double> RxTxFactor { get; set; }

		/// <summary>
		/// The amount of disk space in megabytes to use. If
		/// unspecified, the default is 0. Changing this creates a new flavor.
		/// </summary>
		public Pulumi.IO<int> Swap { get; set; }

		/// <summary>
		/// The number of virtual CPUs to use. Changing this creates
		/// a new flavor.
		/// </summary>
		public Pulumi.IO<int> Vcpus { get; set; }

	} // FlavorArgs

	/// <summary>
	/// Manages a V2 flavor resource within OpenStack.
	/// </summary>
	public class Flavor : Pulumi.CustomResource {
		/// <summary>
		/// The amount of disk space in gigabytes to use for the root
		/// (/) partition. Changing this creates a new flavor.
		/// </summary>
		public Pulumi.IO<int> Disk { get; set; }

		public Pulumi.IO<int> Ephemeral { get; set; }

		/// <summary>
		/// Key/Value pairs of metadata for the flavor.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> ExtraSpecs { get; set; }

		/// <summary>
		/// Whether the flavor is public. Changing this creates
		/// a new flavor.
		/// </summary>
		public Pulumi.IO<bool> IsPublic { get; set; }

		/// <summary>
		/// A unique name for the flavor. Changing this creates a new
		/// flavor.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The amount of RAM to use, in megabytes. Changing this
		/// creates a new flavor.
		/// </summary>
		public Pulumi.IO<int> Ram { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Compute client.
		/// Flavors are associated with accounts, but a Compute client is needed to
		/// create one. If omitted, the `region` argument of the provider is used.
		/// Changing this creates a new flavor.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// RX/TX bandwith factor. The default is 1. Changing
		/// this creates a new flavor.
		/// </summary>
		public Pulumi.IO<double> RxTxFactor { get; set; }

		/// <summary>
		/// The amount of disk space in megabytes to use. If
		/// unspecified, the default is 0. Changing this creates a new flavor.
		/// </summary>
		public Pulumi.IO<int> Swap { get; set; }

		/// <summary>
		/// The number of virtual CPUs to use. Changing this creates
		/// a new flavor.
		/// </summary>
		public Pulumi.IO<int> Vcpus { get; set; }

		public Flavor(string name, FlavorArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("openstack:compute/flavor:Flavor", name, SerialiseArgs(args), opts) {
			Disk = Outputs["disk"].Select(item => Protobuf.ToInt(item));
			Ephemeral = Outputs["ephemeral"].Select(item => Protobuf.ToInt(item));
			ExtraSpecs = Outputs["extraSpecs"].Select(item => Protobuf.ToMap(item));
			IsPublic = Outputs["isPublic"].Select(item => Protobuf.ToBool(item));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Ram = Outputs["ram"].Select(item => Protobuf.ToInt(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			RxTxFactor = Outputs["rxTxFactor"].Select(item => Protobuf.ToDouble(item));
			Swap = Outputs["swap"].Select(item => Protobuf.ToInt(item));
			Vcpus = Outputs["vcpus"].Select(item => Protobuf.ToInt(item));
			Disk = Outputs["disk"].Select(item => Protobuf.ToInt(item));
			Ephemeral = Outputs["ephemeral"].Select(item => Protobuf.ToInt(item));
			ExtraSpecs = Outputs["extraSpecs"].Select(item => Protobuf.ToMap(item));
			IsPublic = Outputs["isPublic"].Select(item => Protobuf.ToBool(item));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Ram = Outputs["ram"].Select(item => Protobuf.ToInt(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			RxTxFactor = Outputs["rxTxFactor"].Select(item => Protobuf.ToDouble(item));
			Swap = Outputs["swap"].Select(item => Protobuf.ToInt(item));
			Vcpus = Outputs["vcpus"].Select(item => Protobuf.ToInt(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(FlavorArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["disk"] = Protobuf.ToProtobuf(args.Disk);
			props["ephemeral"] = Protobuf.ToProtobuf(args.Ephemeral);
			props["extraSpecs"] = Protobuf.ToProtobuf(args.ExtraSpecs);
			props["isPublic"] = Protobuf.ToProtobuf(args.IsPublic);
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["ram"] = Protobuf.ToProtobuf(args.Ram);
			props["region"] = Protobuf.ToProtobuf(args.Region);
			props["rxTxFactor"] = Protobuf.ToProtobuf(args.RxTxFactor);
			props["swap"] = Protobuf.ToProtobuf(args.Swap);
			props["vcpus"] = Protobuf.ToProtobuf(args.Vcpus);
			return props;
		} // SerialiseArgs

	} // Flavor
} // Pulumi.Openstack.Compute
