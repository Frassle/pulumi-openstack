// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Openstack.Compute {

	/// <summary>
	/// The set of arguments for constructing a FloatingIpAssociate resource.
	/// </summary>
	public struct FloatingIpAssociateArgs {
		/// <summary>
		/// The specific IP address to direct traffic to.
		/// </summary>
		public Pulumi.IO<string> FixedIp { get; set; }

		/// <summary>
		/// The floating IP to associate.
		/// </summary>
		public Pulumi.IO<string> FloatingIp { get; set; }

		/// <summary>
		/// The instance to associte the floating IP with.
		/// </summary>
		public Pulumi.IO<string> InstanceId { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Compute client.
		/// Keypairs are associated with accounts, but a Compute client is needed to
		/// create one. If omitted, the `region` argument of the provider is used.
		/// Changing this creates a new floatingip_associate.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// In cases where the OpenStack environment
		/// does not automatically wait until the association has finished, set this
		/// option to have Terraform poll the instance until the floating IP has been
		/// associated. Defaults to false.
		/// </summary>
		public Pulumi.IO<bool> WaitUntilAssociated { get; set; }

	} // FloatingIpAssociateArgs

	/// <summary>
	/// Associate a floating IP to an instance. This can be used instead of the
	/// `floating_ip` options in `openstack_compute_instance_v2`.
	/// </summary>
	public class FloatingIpAssociate : Pulumi.CustomResource {
		/// <summary>
		/// The specific IP address to direct traffic to.
		/// </summary>
		public Pulumi.IO<string> FixedIp { get; set; }

		/// <summary>
		/// The floating IP to associate.
		/// </summary>
		public Pulumi.IO<string> FloatingIp { get; set; }

		/// <summary>
		/// The instance to associte the floating IP with.
		/// </summary>
		public Pulumi.IO<string> InstanceId { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Compute client.
		/// Keypairs are associated with accounts, but a Compute client is needed to
		/// create one. If omitted, the `region` argument of the provider is used.
		/// Changing this creates a new floatingip_associate.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// In cases where the OpenStack environment
		/// does not automatically wait until the association has finished, set this
		/// option to have Terraform poll the instance until the floating IP has been
		/// associated. Defaults to false.
		/// </summary>
		public Pulumi.IO<bool> WaitUntilAssociated { get; set; }

		public FloatingIpAssociate(string name, FloatingIpAssociateArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("openstack:compute/floatingIpAssociate:FloatingIpAssociate", name, SerialiseArgs(args), opts) {
			FixedIp = Outputs["fixedIp"].Select(item => Protobuf.ToString(item));
			FloatingIp = Outputs["floatingIp"].Select(item => Protobuf.ToString(item));
			InstanceId = Outputs["instanceId"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			WaitUntilAssociated = Outputs["waitUntilAssociated"].Select(item => Protobuf.ToBool(item));
			FixedIp = Outputs["fixedIp"].Select(item => Protobuf.ToString(item));
			FloatingIp = Outputs["floatingIp"].Select(item => Protobuf.ToString(item));
			InstanceId = Outputs["instanceId"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			WaitUntilAssociated = Outputs["waitUntilAssociated"].Select(item => Protobuf.ToBool(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(FloatingIpAssociateArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["fixedIp"] = Protobuf.ToProtobuf(args.FixedIp);
			props["floatingIp"] = Protobuf.ToProtobuf(args.FloatingIp);
			props["instanceId"] = Protobuf.ToProtobuf(args.InstanceId);
			props["region"] = Protobuf.ToProtobuf(args.Region);
			props["waitUntilAssociated"] = Protobuf.ToProtobuf(args.WaitUntilAssociated);
			return props;
		} // SerialiseArgs

	} // FloatingIpAssociate
} // Pulumi.Openstack.Compute
