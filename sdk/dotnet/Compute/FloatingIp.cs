// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Openstack.Compute {

	/// <summary>
	/// The set of arguments for constructing a FloatingIp resource.
	/// </summary>
	public struct FloatingIpArgs {
		/// <summary>
		/// The name of the pool from which to obtain the floating
		/// IP. Changing this creates a new floating IP.
		/// </summary>
		public Pulumi.IO<string> Pool { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Compute client.
		/// A Compute client is needed to create a floating IP that can be used with
		/// a compute instance. If omitted, the `region` argument of the provider
		/// is used. Changing this creates a new floating IP (which may or may not
		/// have a different address).
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

	} // FloatingIpArgs

	/// <summary>
	/// Manages a V2 floating IP resource within OpenStack Nova (compute)
	/// that can be used for compute instances.
	/// 
	/// Please note that managing floating IPs through the OpenStack Compute API has
	/// been deprecated. Unless you are using an older OpenStack environment, it is
	/// recommended to use the `openstack_networking_floatingip_v2`
	/// resource instead, which uses the OpenStack Networking API.
	/// </summary>
	public class FloatingIp : Pulumi.CustomResource {
		/// <summary>
		/// The actual floating IP address itself.
		/// </summary>
		public Pulumi.IO<string> Address { get; set; }

		/// <summary>
		/// The fixed IP address corresponding to the floating IP.
		/// </summary>
		public Pulumi.IO<string> FixedIp { get; set; }

		/// <summary>
		/// UUID of the compute instance associated with the floating IP.
		/// </summary>
		public Pulumi.IO<string> InstanceId { get; set; }

		/// <summary>
		/// The name of the pool from which to obtain the floating
		/// IP. Changing this creates a new floating IP.
		/// </summary>
		public Pulumi.IO<string> Pool { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Compute client.
		/// A Compute client is needed to create a floating IP that can be used with
		/// a compute instance. If omitted, the `region` argument of the provider
		/// is used. Changing this creates a new floating IP (which may or may not
		/// have a different address).
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		public FloatingIp(string name, FloatingIpArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("openstack:compute/floatingIp:FloatingIp", name, SerialiseArgs(args), opts) {
			Pool = Outputs["pool"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			Address = Outputs["address"].Select(item => Protobuf.ToString(item));
			FixedIp = Outputs["fixedIp"].Select(item => Protobuf.ToString(item));
			InstanceId = Outputs["instanceId"].Select(item => Protobuf.ToString(item));
			Pool = Outputs["pool"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(FloatingIpArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["pool"] = Protobuf.ToProtobuf(args.Pool);
			props["region"] = Protobuf.ToProtobuf(args.Region);
			props["address"] = null; //out
			props["fixedIp"] = null; //out
			props["instanceId"] = null; //out
			return props;
		} // SerialiseArgs

	} // FloatingIp
} // Pulumi.Openstack.Compute
