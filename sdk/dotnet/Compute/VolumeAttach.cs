// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Openstack.Compute {

	/// <summary>
	/// The set of arguments for constructing a VolumeAttach resource.
	/// </summary>
	public struct VolumeAttachArgs {
		/// <summary>
		/// The device of the volume attachment (ex: `/dev/vdc`).
		/// _NOTE_: Being able to specify a device is dependent upon the hypervisor in
		/// use. There is a chance that the device specified in Terraform will not be
		/// the same device the hypervisor chose. If this happens, Terraform will wish
		/// to update the device upon subsequent applying which will cause the volume
		/// to be detached and reattached indefinitely. Please use with caution.
		/// </summary>
		public Pulumi.IO<string> Device { get; set; }

		/// <summary>
		/// The ID of the Instance to attach the Volume to.
		/// </summary>
		public Pulumi.IO<string> InstanceId { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Compute client.
		/// A Compute client is needed to create a volume attachment. If omitted, the
		/// `region` argument of the provider is used. Changing this creates a
		/// new volume attachment.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// The ID of the Volume to attach to an Instance.
		/// </summary>
		public Pulumi.IO<string> VolumeId { get; set; }

	} // VolumeAttachArgs

	/// <summary>
	/// Attaches a Block Storage Volume to an Instance using the OpenStack
	/// Compute (Nova) v2 API.
	/// </summary>
	public class VolumeAttach : Pulumi.CustomResource {
		/// <summary>
		/// The device of the volume attachment (ex: `/dev/vdc`).
		/// _NOTE_: Being able to specify a device is dependent upon the hypervisor in
		/// use. There is a chance that the device specified in Terraform will not be
		/// the same device the hypervisor chose. If this happens, Terraform will wish
		/// to update the device upon subsequent applying which will cause the volume
		/// to be detached and reattached indefinitely. Please use with caution.
		/// </summary>
		public Pulumi.IO<string> Device { get; set; }

		/// <summary>
		/// The ID of the Instance to attach the Volume to.
		/// </summary>
		public Pulumi.IO<string> InstanceId { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Compute client.
		/// A Compute client is needed to create a volume attachment. If omitted, the
		/// `region` argument of the provider is used. Changing this creates a
		/// new volume attachment.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// The ID of the Volume to attach to an Instance.
		/// </summary>
		public Pulumi.IO<string> VolumeId { get; set; }

		public VolumeAttach(string name, VolumeAttachArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("openstack:compute/volumeAttach:VolumeAttach", name, SerialiseArgs(args), opts) {
			Device = Outputs["device"].Select(item => Protobuf.ToString(item));
			InstanceId = Outputs["instanceId"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			VolumeId = Outputs["volumeId"].Select(item => Protobuf.ToString(item));
			Device = Outputs["device"].Select(item => Protobuf.ToString(item));
			InstanceId = Outputs["instanceId"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			VolumeId = Outputs["volumeId"].Select(item => Protobuf.ToString(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(VolumeAttachArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["device"] = Protobuf.ToProtobuf(args.Device);
			props["instanceId"] = Protobuf.ToProtobuf(args.InstanceId);
			props["region"] = Protobuf.ToProtobuf(args.Region);
			props["volumeId"] = Protobuf.ToProtobuf(args.VolumeId);
			return props;
		} // SerialiseArgs

	} // VolumeAttach
} // Pulumi.Openstack.Compute
