// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Openstack.Objectstorage {

	/// <summary>
	/// The set of arguments for constructing a Container resource.
	/// </summary>
	public struct ContainerArgs {
		/// <summary>
		/// Sets an access control list (ACL) that grants
		/// read access. This header can contain a comma-delimited list of users that
		/// can read the container (allows the GET method for all objects in the
		/// container). Changing this updates the access control list read access.
		/// </summary>
		public Pulumi.IO<string> ContainerRead { get; set; }

		/// <summary>
		/// The secret key for container synchronization.
		/// Changing this updates container synchronization.
		/// </summary>
		public Pulumi.IO<string> ContainerSyncKey { get; set; }

		/// <summary>
		/// The destination for container synchronization.
		/// Changing this updates container synchronization.
		/// </summary>
		public Pulumi.IO<string> ContainerSyncTo { get; set; }

		/// <summary>
		/// Sets an ACL that grants write access.
		/// Changing this updates the access control list write access.
		/// </summary>
		public Pulumi.IO<string> ContainerWrite { get; set; }

		/// <summary>
		/// The MIME type for the container. Changing this
		/// updates the MIME type.
		/// </summary>
		public Pulumi.IO<string> ContentType { get; set; }

		/// <summary>
		/// A boolean that indicates all objects should be deleted from the container so that the container can be destroyed without error. These objects are not recoverable.
		/// </summary>
		public Pulumi.IO<bool> ForceDestroy { get; set; }

		/// <summary>
		/// Custom key/value pairs to associate with the container.
		/// Changing this updates the existing container metadata.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> Metadata { get; set; }

		/// <summary>
		/// A unique name for the container. Changing this creates a
		/// new container.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The region in which to create the container. If
		/// omitted, the `region` argument of the provider is used. Changing this
		/// creates a new container.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

	} // ContainerArgs

	/// <summary>
	/// Manages a V1 container resource within OpenStack.
	/// </summary>
	public class Container : Pulumi.CustomResource {
		/// <summary>
		/// Sets an access control list (ACL) that grants
		/// read access. This header can contain a comma-delimited list of users that
		/// can read the container (allows the GET method for all objects in the
		/// container). Changing this updates the access control list read access.
		/// </summary>
		public Pulumi.IO<string> ContainerRead { get; set; }

		/// <summary>
		/// The secret key for container synchronization.
		/// Changing this updates container synchronization.
		/// </summary>
		public Pulumi.IO<string> ContainerSyncKey { get; set; }

		/// <summary>
		/// The destination for container synchronization.
		/// Changing this updates container synchronization.
		/// </summary>
		public Pulumi.IO<string> ContainerSyncTo { get; set; }

		/// <summary>
		/// Sets an ACL that grants write access.
		/// Changing this updates the access control list write access.
		/// </summary>
		public Pulumi.IO<string> ContainerWrite { get; set; }

		/// <summary>
		/// The MIME type for the container. Changing this
		/// updates the MIME type.
		/// </summary>
		public Pulumi.IO<string> ContentType { get; set; }

		/// <summary>
		/// A boolean that indicates all objects should be deleted from the container so that the container can be destroyed without error. These objects are not recoverable.
		/// </summary>
		public Pulumi.IO<bool> ForceDestroy { get; set; }

		/// <summary>
		/// Custom key/value pairs to associate with the container.
		/// Changing this updates the existing container metadata.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> Metadata { get; set; }

		/// <summary>
		/// A unique name for the container. Changing this creates a
		/// new container.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The region in which to create the container. If
		/// omitted, the `region` argument of the provider is used. Changing this
		/// creates a new container.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		public Container(string name, ContainerArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("openstack:objectstorage/container:Container", name, SerialiseArgs(args), opts) {
			ContainerRead = Outputs["containerRead"].Select(item => Protobuf.ToString(item));
			ContainerSyncKey = Outputs["containerSyncKey"].Select(item => Protobuf.ToString(item));
			ContainerSyncTo = Outputs["containerSyncTo"].Select(item => Protobuf.ToString(item));
			ContainerWrite = Outputs["containerWrite"].Select(item => Protobuf.ToString(item));
			ContentType = Outputs["contentType"].Select(item => Protobuf.ToString(item));
			ForceDestroy = Outputs["forceDestroy"].Select(item => Protobuf.ToBool(item));
			Metadata = Outputs["metadata"].Select(item => Protobuf.ToMap(item));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			ContainerRead = Outputs["containerRead"].Select(item => Protobuf.ToString(item));
			ContainerSyncKey = Outputs["containerSyncKey"].Select(item => Protobuf.ToString(item));
			ContainerSyncTo = Outputs["containerSyncTo"].Select(item => Protobuf.ToString(item));
			ContainerWrite = Outputs["containerWrite"].Select(item => Protobuf.ToString(item));
			ContentType = Outputs["contentType"].Select(item => Protobuf.ToString(item));
			ForceDestroy = Outputs["forceDestroy"].Select(item => Protobuf.ToBool(item));
			Metadata = Outputs["metadata"].Select(item => Protobuf.ToMap(item));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(ContainerArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["containerRead"] = Protobuf.ToProtobuf(args.ContainerRead);
			props["containerSyncKey"] = Protobuf.ToProtobuf(args.ContainerSyncKey);
			props["containerSyncTo"] = Protobuf.ToProtobuf(args.ContainerSyncTo);
			props["containerWrite"] = Protobuf.ToProtobuf(args.ContainerWrite);
			props["contentType"] = Protobuf.ToProtobuf(args.ContentType);
			props["forceDestroy"] = Protobuf.ToProtobuf(args.ForceDestroy);
			props["metadata"] = Protobuf.ToProtobuf(args.Metadata);
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["region"] = Protobuf.ToProtobuf(args.Region);
			return props;
		} // SerialiseArgs

	} // Container
} // Pulumi.Openstack.Objectstorage
