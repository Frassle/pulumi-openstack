// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Openstack.Identity {

	public sealed class GetAuthScopeRole : Pulumi.IProtobuf {
		public string RoleId { get; set; }
		public string RoleName { get; set; }

		public Google.Protobuf.WellKnownTypes.Value ToProtobuf() {
			return Pulumi.Protobuf.ToProtobuf(
				new KeyValuePair<string, Google.Protobuf.WellKnownTypes.Value>("role_id", Protobuf.ToProtobuf(RoleId)),
				new KeyValuePair<string, Google.Protobuf.WellKnownTypes.Value>("role_name", Protobuf.ToProtobuf(RoleName)));
		} // ToProtobuf

		public static GetAuthScopeRole FromProtobuf(Google.Protobuf.WellKnownTypes.Value value) {
			var obj = value.StructValue;
			return new GetAuthScopeRole() {
				RoleId = Protobuf.ToString(obj.Fields["role_id"]),
				RoleName = Protobuf.ToString(obj.Fields["role_name"]),
			};
		} // FromProtobuf

	} // GetAuthScopeRole

	/// <summary>
	/// A collection of arguments for invoking getAuthScope.
	/// </summary>
	public struct GetAuthScopeArgs {
		/// <summary>
		/// The name of the scope. This is an arbitrary name which is
		/// only used as a unique identifier so an actual token isn't used as the ID.
		/// </summary>
		public string Name { get; set; }

		/// <summary>
		/// The region in which to obtain the V3 Identity client.
		/// A Identity client is needed to retrieve tokens IDs. If omitted, the
		/// `region` argument of the provider is used.
		/// </summary>
		public string Region { get; set; }

	} // GetAuthScopeArgs

	/// <summary>
	/// A collection of values returned by getAuthScope.
	/// </summary>
	public struct GetAuthScopeResult {
		/// <summary>
		/// The domain ID of the project.
		/// </summary>
		public string ProjectDomainId { get; set; }

		/// <summary>
		/// The domain name of the project.
		/// </summary>
		public string ProjectDomainName { get; set; }

		/// <summary>
		/// The project ID of the scope.
		/// </summary>
		public string ProjectId { get; set; }

		/// <summary>
		/// The project name of the scope.
		/// </summary>
		public string ProjectName { get; set; }

		public string Region { get; set; }

		/// <summary>
		/// A list of roles in the current scope. See reference below.
		/// </summary>
		public GetAuthScopeRole[] Roles { get; set; }

		/// <summary>
		/// The domain ID of the user.
		/// </summary>
		public string UserDomainId { get; set; }

		/// <summary>
		/// The domain name of the user.
		/// </summary>
		public string UserDomainName { get; set; }

		/// <summary>
		/// The user ID the of the scope.
		/// </summary>
		public string UserId { get; set; }

		/// <summary>
		/// The username of the scope.
		/// </summary>
		public string UserName { get; set; }

		/// <summary>
		/// id is the provider-assigned unique ID for this managed resource.
		/// </summary>
		public string Id { get; set; }

	} // GetAuthScopeResult

	public static partial class IdentityModule {
		/// <summary>
		/// Use this data source to get authentication information about the current
		/// auth scope in use. This can be used as self-discovery or introspection of
		/// the username or project name currently in use.
		/// </summary>
		public static System.Threading.Tasks.Task<GetAuthScopeResult> GetAuthScope(GetAuthScopeArgs args, Pulumi.InvokeOptions opts = default(Pulumi.InvokeOptions)) {
			var invokeArgs = new Google.Protobuf.WellKnownTypes.Struct();
			invokeArgs.Fields["name"] = Protobuf.ToProtobuf(args.Name);
			invokeArgs.Fields["region"] = Protobuf.ToProtobuf(args.Region);

			var task = Pulumi.Runtime.InvokeAsync("openstack:identity/getAuthScope:getAuthScope", invokeArgs, opts);

			return task.ContinueWith(response => {
				var protobuf = response.Result;
				var result = new GetAuthScopeResult();
				if (protobuf.Fields.ContainsKey("projectDomainId")) {
					result.ProjectDomainId = Protobuf.ToString(protobuf.Fields["projectDomainId"]);
				}
				if (protobuf.Fields.ContainsKey("projectDomainName")) {
					result.ProjectDomainName = Protobuf.ToString(protobuf.Fields["projectDomainName"]);
				}
				if (protobuf.Fields.ContainsKey("projectId")) {
					result.ProjectId = Protobuf.ToString(protobuf.Fields["projectId"]);
				}
				if (protobuf.Fields.ContainsKey("projectName")) {
					result.ProjectName = Protobuf.ToString(protobuf.Fields["projectName"]);
				}
				if (protobuf.Fields.ContainsKey("region")) {
					result.Region = Protobuf.ToString(protobuf.Fields["region"]);
				}
				if (protobuf.Fields.ContainsKey("roles")) {
					result.Roles = Protobuf.ToList(protobuf.Fields["roles"], item => GetAuthScopeRole.FromProtobuf(item));
				}
				if (protobuf.Fields.ContainsKey("userDomainId")) {
					result.UserDomainId = Protobuf.ToString(protobuf.Fields["userDomainId"]);
				}
				if (protobuf.Fields.ContainsKey("userDomainName")) {
					result.UserDomainName = Protobuf.ToString(protobuf.Fields["userDomainName"]);
				}
				if (protobuf.Fields.ContainsKey("userId")) {
					result.UserId = Protobuf.ToString(protobuf.Fields["userId"]);
				}
				if (protobuf.Fields.ContainsKey("userName")) {
					result.UserName = Protobuf.ToString(protobuf.Fields["userName"]);
				}
				if (protobuf.Fields.ContainsKey("id")) {
					result.Id = Protobuf.ToString(protobuf.Fields["id"]);
				}
				return result;
			});
		} // GetAuthScope

	} // IdentityModule
} // Pulumi.Openstack.Identity
