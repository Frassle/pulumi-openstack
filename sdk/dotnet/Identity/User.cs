// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Openstack.Identity {

	public sealed class UserArgsMultiFactorAuthRule : Pulumi.IIOProtobuf {
		public Pulumi.IO<Pulumi.IO<string>[]> Rule { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Pulumi.Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("rule", Protobuf.ToProtobuf(Rule, item => Protobuf.ToProtobuf(item))));
		} // ToProtobuf

	} // UserArgsMultiFactorAuthRule

	public sealed class UserMultiFactorAuthRule : Pulumi.IIOProtobuf {
		public Pulumi.IO<string[]> Rule { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Pulumi.Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("rule", Protobuf.ToProtobuf(Rule, item => Protobuf.ToProtobuf(item))));
		} // ToProtobuf

		public static UserMultiFactorAuthRule FromProtobuf(Google.Protobuf.WellKnownTypes.Value value) {
			var obj = value.StructValue;
			return new UserMultiFactorAuthRule() {
				Rule = Protobuf.ToList(obj.Fields["rule"], item => Protobuf.ToString(item)),
			};
		} // FromProtobuf

	} // UserMultiFactorAuthRule

	/// <summary>
	/// The set of arguments for constructing a User resource.
	/// </summary>
	public struct UserArgs {
		/// <summary>
		/// The default project this user belongs to.
		/// </summary>
		public Pulumi.IO<string> DefaultProjectId { get; set; }

		/// <summary>
		/// A description of the user.
		/// </summary>
		public Pulumi.IO<string> Description { get; set; }

		/// <summary>
		/// The domain this user belongs to.
		/// </summary>
		public Pulumi.IO<string> DomainId { get; set; }

		/// <summary>
		/// Whether the user is enabled or disabled. Valid
		/// values are `true` and `false`.
		/// </summary>
		public Pulumi.IO<bool> Enabled { get; set; }

		/// <summary>
		/// Free-form key/value pairs of extra information.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> Extra { get; set; }

		/// <summary>
		/// User will not have to
		/// change their password upon first use. Valid values are `true` and `false`.
		/// </summary>
		public Pulumi.IO<bool> IgnoreChangePasswordUponFirstUse { get; set; }

		/// <summary>
		/// User will not have a failure
		/// lockout placed on their account. Valid values are `true` and `false`.
		/// </summary>
		public Pulumi.IO<bool> IgnoreLockoutFailureAttempts { get; set; }

		/// <summary>
		/// User's password will not expire.
		/// Valid values are `true` and `false`.
		/// </summary>
		public Pulumi.IO<bool> IgnorePasswordExpiry { get; set; }

		/// <summary>
		/// Whether to enable multi-factor
		/// authentication. Valid values are `true` and `false`.
		/// </summary>
		public Pulumi.IO<bool> MultiFactorAuthEnabled { get; set; }

		/// <summary>
		/// A multi-factor authentication rule.
		/// The structure is documented below. Please see the
		/// [Ocata release notes](https://docs.openstack.org/releasenotes/keystone/ocata.html)
		/// for more information on how to use mulit-factor rules.
		/// </summary>
		public Pulumi.IO<Pulumi.IO<UserArgsMultiFactorAuthRule>[]> MultiFactorAuthRules { get; set; }

		/// <summary>
		/// The name of the user.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The password for the user.
		/// </summary>
		public Pulumi.IO<string> Password { get; set; }

		/// <summary>
		/// The region in which to obtain the V3 Keystone client.
		/// If omitted, the `region` argument of the provider is used. Changing this
		/// creates a new User.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

	} // UserArgs

	/// <summary>
	/// Manages a V3 User resource within OpenStack Keystone.
	/// 
	/// Note: You _must_ have admin privileges in your OpenStack cloud to use
	/// this resource.
	/// </summary>
	public class User : Pulumi.CustomResource {
		/// <summary>
		/// The default project this user belongs to.
		/// </summary>
		public Pulumi.IO<string> DefaultProjectId { get; set; }

		/// <summary>
		/// A description of the user.
		/// </summary>
		public Pulumi.IO<string> Description { get; set; }

		/// <summary>
		/// The domain this user belongs to.
		/// </summary>
		public Pulumi.IO<string> DomainId { get; set; }

		/// <summary>
		/// Whether the user is enabled or disabled. Valid
		/// values are `true` and `false`.
		/// </summary>
		public Pulumi.IO<bool> Enabled { get; set; }

		/// <summary>
		/// Free-form key/value pairs of extra information.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> Extra { get; set; }

		/// <summary>
		/// User will not have to
		/// change their password upon first use. Valid values are `true` and `false`.
		/// </summary>
		public Pulumi.IO<bool> IgnoreChangePasswordUponFirstUse { get; set; }

		/// <summary>
		/// User will not have a failure
		/// lockout placed on their account. Valid values are `true` and `false`.
		/// </summary>
		public Pulumi.IO<bool> IgnoreLockoutFailureAttempts { get; set; }

		/// <summary>
		/// User's password will not expire.
		/// Valid values are `true` and `false`.
		/// </summary>
		public Pulumi.IO<bool> IgnorePasswordExpiry { get; set; }

		/// <summary>
		/// Whether to enable multi-factor
		/// authentication. Valid values are `true` and `false`.
		/// </summary>
		public Pulumi.IO<bool> MultiFactorAuthEnabled { get; set; }

		/// <summary>
		/// A multi-factor authentication rule.
		/// The structure is documented below. Please see the
		/// [Ocata release notes](https://docs.openstack.org/releasenotes/keystone/ocata.html)
		/// for more information on how to use mulit-factor rules.
		/// </summary>
		public Pulumi.IO<UserMultiFactorAuthRule[]> MultiFactorAuthRules { get; set; }

		/// <summary>
		/// The name of the user.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The password for the user.
		/// </summary>
		public Pulumi.IO<string> Password { get; set; }

		/// <summary>
		/// The region in which to obtain the V3 Keystone client.
		/// If omitted, the `region` argument of the provider is used. Changing this
		/// creates a new User.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		public User(string name, UserArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("openstack:identity/user:User", name, SerialiseArgs(args), opts) {
			DefaultProjectId = Outputs["defaultProjectId"].Select(item => Protobuf.ToString(item));
			Description = Outputs["description"].Select(item => Protobuf.ToString(item));
			DomainId = Outputs["domainId"].Select(item => Protobuf.ToString(item));
			Enabled = Outputs["enabled"].Select(item => Protobuf.ToBool(item));
			Extra = Outputs["extra"].Select(item => Protobuf.ToMap(item));
			IgnoreChangePasswordUponFirstUse = Outputs["ignoreChangePasswordUponFirstUse"].Select(item => Protobuf.ToBool(item));
			IgnoreLockoutFailureAttempts = Outputs["ignoreLockoutFailureAttempts"].Select(item => Protobuf.ToBool(item));
			IgnorePasswordExpiry = Outputs["ignorePasswordExpiry"].Select(item => Protobuf.ToBool(item));
			MultiFactorAuthEnabled = Outputs["multiFactorAuthEnabled"].Select(item => Protobuf.ToBool(item));
			MultiFactorAuthRules = Outputs["multiFactorAuthRules"].Select(item => Protobuf.ToList(item, item1 => UserMultiFactorAuthRule.FromProtobuf(item1)));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Password = Outputs["password"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			DefaultProjectId = Outputs["defaultProjectId"].Select(item => Protobuf.ToString(item));
			Description = Outputs["description"].Select(item => Protobuf.ToString(item));
			DomainId = Outputs["domainId"].Select(item => Protobuf.ToString(item));
			Enabled = Outputs["enabled"].Select(item => Protobuf.ToBool(item));
			Extra = Outputs["extra"].Select(item => Protobuf.ToMap(item));
			IgnoreChangePasswordUponFirstUse = Outputs["ignoreChangePasswordUponFirstUse"].Select(item => Protobuf.ToBool(item));
			IgnoreLockoutFailureAttempts = Outputs["ignoreLockoutFailureAttempts"].Select(item => Protobuf.ToBool(item));
			IgnorePasswordExpiry = Outputs["ignorePasswordExpiry"].Select(item => Protobuf.ToBool(item));
			MultiFactorAuthEnabled = Outputs["multiFactorAuthEnabled"].Select(item => Protobuf.ToBool(item));
			MultiFactorAuthRules = Outputs["multiFactorAuthRules"].Select(item => Protobuf.ToList(item, item1 => UserMultiFactorAuthRule.FromProtobuf(item1)));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Password = Outputs["password"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(UserArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["defaultProjectId"] = Protobuf.ToProtobuf(args.DefaultProjectId);
			props["description"] = Protobuf.ToProtobuf(args.Description);
			props["domainId"] = Protobuf.ToProtobuf(args.DomainId);
			props["enabled"] = Protobuf.ToProtobuf(args.Enabled);
			props["extra"] = Protobuf.ToProtobuf(args.Extra);
			props["ignoreChangePasswordUponFirstUse"] = Protobuf.ToProtobuf(args.IgnoreChangePasswordUponFirstUse);
			props["ignoreLockoutFailureAttempts"] = Protobuf.ToProtobuf(args.IgnoreLockoutFailureAttempts);
			props["ignorePasswordExpiry"] = Protobuf.ToProtobuf(args.IgnorePasswordExpiry);
			props["multiFactorAuthEnabled"] = Protobuf.ToProtobuf(args.MultiFactorAuthEnabled);
			props["multiFactorAuthRules"] = Protobuf.ToProtobuf(args.MultiFactorAuthRules, item => Protobuf.ToProtobuf(item));
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["password"] = Protobuf.ToProtobuf(args.Password);
			props["region"] = Protobuf.ToProtobuf(args.Region);
			return props;
		} // SerialiseArgs

	} // User
} // Pulumi.Openstack.Identity
