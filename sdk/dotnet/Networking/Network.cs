// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Openstack.Networking {

	public sealed class NetworkArgsSegment : Pulumi.IIOProtobuf {
		public Pulumi.IO<string> NetworkType { get; set; }
		public Pulumi.IO<string> PhysicalNetwork { get; set; }
		public Pulumi.IO<int> SegmentationId { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Pulumi.Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("network_type", Protobuf.ToProtobuf(NetworkType)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("physical_network", Protobuf.ToProtobuf(PhysicalNetwork)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("segmentation_id", Protobuf.ToProtobuf(SegmentationId)));
		} // ToProtobuf

	} // NetworkArgsSegment

	public sealed class NetworkSegment : Pulumi.IIOProtobuf {
		public Pulumi.IO<string> NetworkType { get; set; }
		public Pulumi.IO<string> PhysicalNetwork { get; set; }
		public Pulumi.IO<int> SegmentationId { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Pulumi.Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("network_type", Protobuf.ToProtobuf(NetworkType)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("physical_network", Protobuf.ToProtobuf(PhysicalNetwork)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("segmentation_id", Protobuf.ToProtobuf(SegmentationId)));
		} // ToProtobuf

		public static NetworkSegment FromProtobuf(Google.Protobuf.WellKnownTypes.Value value) {
			var obj = value.StructValue;
			return new NetworkSegment() {
				NetworkType = Protobuf.ToString(obj.Fields["network_type"]),
				PhysicalNetwork = Protobuf.ToString(obj.Fields["physical_network"]),
				SegmentationId = Protobuf.ToInt(obj.Fields["segmentation_id"]),
			};
		} // FromProtobuf

	} // NetworkSegment

	/// <summary>
	/// The set of arguments for constructing a Network resource.
	/// </summary>
	public struct NetworkArgs {
		/// <summary>
		/// The administrative state of the network.
		/// Acceptable values are "true" and "false". Changing this value updates the
		/// state of the existing network.
		/// </summary>
		public Pulumi.IO<string> AdminStateUp { get; set; }

		/// <summary>
		/// An availability zone is used to make
		/// network resources highly available. Used for resources with high availability
		/// so that they are scheduled on different availability zones. Changing this
		/// creates a new network.
		/// </summary>
		public Pulumi.IO<Pulumi.IO<string>[]> AvailabilityZoneHints { get; set; }

		/// <summary>
		/// Specifies whether the network resource has the
		/// external routing facility. Valid values are true and false. Defaults to
		/// false. Changing this updates the external attribute of the existing network.
		/// </summary>
		public Pulumi.IO<bool> External { get; set; }

		/// <summary>
		/// The name of the network. Changing this updates the name of
		/// the existing network.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Networking client.
		/// A Networking client is needed to create a Neutron network. If omitted, the
		/// `region` argument of the provider is used. Changing this creates a new
		/// network.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// An array of one or more provider segment objects.
		/// </summary>
		public Pulumi.IO<Pulumi.IO<NetworkArgsSegment>[]> Segments { get; set; }

		/// <summary>
		/// Specifies whether the network resource can be accessed
		/// by any tenant or not. Changing this updates the sharing capabalities of the
		/// existing network.
		/// </summary>
		public Pulumi.IO<string> Shared { get; set; }

		/// <summary>
		/// The owner of the network. Required if admin wants to
		/// create a network for another tenant. Changing this creates a new network.
		/// </summary>
		public Pulumi.IO<string> TenantId { get; set; }

		/// <summary>
		/// Map of additional options.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> ValueSpecs { get; set; }

	} // NetworkArgs

	/// <summary>
	/// Manages a V2 Neutron network resource within OpenStack.
	/// </summary>
	public class Network : Pulumi.CustomResource {
		/// <summary>
		/// The administrative state of the network.
		/// Acceptable values are "true" and "false". Changing this value updates the
		/// state of the existing network.
		/// </summary>
		public Pulumi.IO<string> AdminStateUp { get; set; }

		/// <summary>
		/// An availability zone is used to make
		/// network resources highly available. Used for resources with high availability
		/// so that they are scheduled on different availability zones. Changing this
		/// creates a new network.
		/// </summary>
		public Pulumi.IO<string[]> AvailabilityZoneHints { get; set; }

		/// <summary>
		/// Specifies whether the network resource has the
		/// external routing facility. Valid values are true and false. Defaults to
		/// false. Changing this updates the external attribute of the existing network.
		/// </summary>
		public Pulumi.IO<bool> External { get; set; }

		/// <summary>
		/// The name of the network. Changing this updates the name of
		/// the existing network.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Networking client.
		/// A Networking client is needed to create a Neutron network. If omitted, the
		/// `region` argument of the provider is used. Changing this creates a new
		/// network.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// An array of one or more provider segment objects.
		/// </summary>
		public Pulumi.IO<NetworkSegment[]> Segments { get; set; }

		/// <summary>
		/// Specifies whether the network resource can be accessed
		/// by any tenant or not. Changing this updates the sharing capabalities of the
		/// existing network.
		/// </summary>
		public Pulumi.IO<string> Shared { get; set; }

		/// <summary>
		/// The owner of the network. Required if admin wants to
		/// create a network for another tenant. Changing this creates a new network.
		/// </summary>
		public Pulumi.IO<string> TenantId { get; set; }

		/// <summary>
		/// Map of additional options.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> ValueSpecs { get; set; }

		public Network(string name, NetworkArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("openstack:networking/network:Network", name, SerialiseArgs(args), opts) {
			AdminStateUp = Outputs["adminStateUp"].Select(item => Protobuf.ToString(item));
			AvailabilityZoneHints = Outputs["availabilityZoneHints"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			External = Outputs["external"].Select(item => Protobuf.ToBool(item));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			Segments = Outputs["segments"].Select(item => Protobuf.ToList(item, item1 => NetworkSegment.FromProtobuf(item1)));
			Shared = Outputs["shared"].Select(item => Protobuf.ToString(item));
			TenantId = Outputs["tenantId"].Select(item => Protobuf.ToString(item));
			ValueSpecs = Outputs["valueSpecs"].Select(item => Protobuf.ToMap(item));
			AdminStateUp = Outputs["adminStateUp"].Select(item => Protobuf.ToString(item));
			AvailabilityZoneHints = Outputs["availabilityZoneHints"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			External = Outputs["external"].Select(item => Protobuf.ToBool(item));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			Segments = Outputs["segments"].Select(item => Protobuf.ToList(item, item1 => NetworkSegment.FromProtobuf(item1)));
			Shared = Outputs["shared"].Select(item => Protobuf.ToString(item));
			TenantId = Outputs["tenantId"].Select(item => Protobuf.ToString(item));
			ValueSpecs = Outputs["valueSpecs"].Select(item => Protobuf.ToMap(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(NetworkArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["adminStateUp"] = Protobuf.ToProtobuf(args.AdminStateUp);
			props["availabilityZoneHints"] = Protobuf.ToProtobuf(args.AvailabilityZoneHints, item => Protobuf.ToProtobuf(item));
			props["external"] = Protobuf.ToProtobuf(args.External);
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["region"] = Protobuf.ToProtobuf(args.Region);
			props["segments"] = Protobuf.ToProtobuf(args.Segments, item => Protobuf.ToProtobuf(item));
			props["shared"] = Protobuf.ToProtobuf(args.Shared);
			props["tenantId"] = Protobuf.ToProtobuf(args.TenantId);
			props["valueSpecs"] = Protobuf.ToProtobuf(args.ValueSpecs);
			return props;
		} // SerialiseArgs

	} // Network
} // Pulumi.Openstack.Networking
