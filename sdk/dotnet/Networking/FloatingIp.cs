// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Openstack.Networking {

	/// <summary>
	/// The set of arguments for constructing a FloatingIp resource.
	/// </summary>
	public struct FloatingIpArgs {
		/// <summary>
		/// The actual/specific floating IP to obtain. By default,
		/// non-admin users are not able to specify a floating IP, so you must either be
		/// an admin user or have had a custom policy or role applied to your OpenStack
		/// user or project.
		/// </summary>
		public Pulumi.IO<string> Address { get; set; }

		/// <summary>
		/// Fixed IP of the port to associate with this floating IP. Required if
		/// the port has multiple fixed IPs.
		/// </summary>
		public Pulumi.IO<string> FixedIp { get; set; }

		/// <summary>
		/// The name of the pool from which to obtain the floating
		/// IP. Changing this creates a new floating IP.
		/// </summary>
		public Pulumi.IO<string> Pool { get; set; }

		/// <summary>
		/// ID of an existing port with at least one IP address to
		/// associate with this floating IP.
		/// </summary>
		public Pulumi.IO<string> PortId { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Networking client.
		/// A Networking client is needed to create a floating IP that can be used with
		/// another networking resource, such as a load balancer. If omitted, the
		/// `region` argument of the provider is used. Changing this creates a new
		/// floating IP (which may or may not have a different address).
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// The subnet ID of the floating IP pool. Specify this if
		/// the floating IP network has multiple subnets.
		/// </summary>
		public Pulumi.IO<string> SubnetId { get; set; }

		/// <summary>
		/// The target tenant ID in which to allocate the floating
		/// IP, if you specify this together with a port_id, make sure the target port
		/// belongs to the same tenant. Changing this creates a new floating IP (which
		/// may or may not have a different address)
		/// </summary>
		public Pulumi.IO<string> TenantId { get; set; }

		/// <summary>
		/// Map of additional options.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> ValueSpecs { get; set; }

	} // FloatingIpArgs

	/// <summary>
	/// Manages a V2 floating IP resource within OpenStack Neutron (networking)
	/// that can be used for load balancers.
	/// These are similar to Nova (compute) floating IP resources,
	/// but only compute floating IPs can be used with compute instances.
	/// </summary>
	public class FloatingIp : Pulumi.CustomResource {
		/// <summary>
		/// The actual/specific floating IP to obtain. By default,
		/// non-admin users are not able to specify a floating IP, so you must either be
		/// an admin user or have had a custom policy or role applied to your OpenStack
		/// user or project.
		/// </summary>
		public Pulumi.IO<string> Address { get; set; }

		/// <summary>
		/// Fixed IP of the port to associate with this floating IP. Required if
		/// the port has multiple fixed IPs.
		/// </summary>
		public Pulumi.IO<string> FixedIp { get; set; }

		/// <summary>
		/// The name of the pool from which to obtain the floating
		/// IP. Changing this creates a new floating IP.
		/// </summary>
		public Pulumi.IO<string> Pool { get; set; }

		/// <summary>
		/// ID of an existing port with at least one IP address to
		/// associate with this floating IP.
		/// </summary>
		public Pulumi.IO<string> PortId { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Networking client.
		/// A Networking client is needed to create a floating IP that can be used with
		/// another networking resource, such as a load balancer. If omitted, the
		/// `region` argument of the provider is used. Changing this creates a new
		/// floating IP (which may or may not have a different address).
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// The subnet ID of the floating IP pool. Specify this if
		/// the floating IP network has multiple subnets.
		/// </summary>
		public Pulumi.IO<string> SubnetId { get; set; }

		/// <summary>
		/// The target tenant ID in which to allocate the floating
		/// IP, if you specify this together with a port_id, make sure the target port
		/// belongs to the same tenant. Changing this creates a new floating IP (which
		/// may or may not have a different address)
		/// </summary>
		public Pulumi.IO<string> TenantId { get; set; }

		/// <summary>
		/// Map of additional options.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> ValueSpecs { get; set; }

		public FloatingIp(string name, FloatingIpArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("openstack:networking/floatingIp:FloatingIp", name, SerialiseArgs(args), opts) {
			Address = Outputs["address"].Select(item => Protobuf.ToString(item));
			FixedIp = Outputs["fixedIp"].Select(item => Protobuf.ToString(item));
			Pool = Outputs["pool"].Select(item => Protobuf.ToString(item));
			PortId = Outputs["portId"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			SubnetId = Outputs["subnetId"].Select(item => Protobuf.ToString(item));
			TenantId = Outputs["tenantId"].Select(item => Protobuf.ToString(item));
			ValueSpecs = Outputs["valueSpecs"].Select(item => Protobuf.ToMap(item));
			Address = Outputs["address"].Select(item => Protobuf.ToString(item));
			FixedIp = Outputs["fixedIp"].Select(item => Protobuf.ToString(item));
			Pool = Outputs["pool"].Select(item => Protobuf.ToString(item));
			PortId = Outputs["portId"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			SubnetId = Outputs["subnetId"].Select(item => Protobuf.ToString(item));
			TenantId = Outputs["tenantId"].Select(item => Protobuf.ToString(item));
			ValueSpecs = Outputs["valueSpecs"].Select(item => Protobuf.ToMap(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(FloatingIpArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["address"] = Protobuf.ToProtobuf(args.Address);
			props["fixedIp"] = Protobuf.ToProtobuf(args.FixedIp);
			props["pool"] = Protobuf.ToProtobuf(args.Pool);
			props["portId"] = Protobuf.ToProtobuf(args.PortId);
			props["region"] = Protobuf.ToProtobuf(args.Region);
			props["subnetId"] = Protobuf.ToProtobuf(args.SubnetId);
			props["tenantId"] = Protobuf.ToProtobuf(args.TenantId);
			props["valueSpecs"] = Protobuf.ToProtobuf(args.ValueSpecs);
			return props;
		} // SerialiseArgs

	} // FloatingIp
} // Pulumi.Openstack.Networking
