// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Openstack.Networking {

	public sealed class RouterArgsExternalFixedIp : Pulumi.IIOProtobuf {
		public Pulumi.IO<string> IpAddress { get; set; }
		public Pulumi.IO<string> SubnetId { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Pulumi.Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("ip_address", Protobuf.ToProtobuf(IpAddress)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("subnet_id", Protobuf.ToProtobuf(SubnetId)));
		} // ToProtobuf

	} // RouterArgsExternalFixedIp

	public sealed class RouterArgsVendorOption : Pulumi.IIOProtobuf {
		public Pulumi.IO<bool> SetRouterGatewayAfterCreate { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Pulumi.Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("set_router_gateway_after_create", Protobuf.ToProtobuf(SetRouterGatewayAfterCreate)));
		} // ToProtobuf

	} // RouterArgsVendorOption

	public sealed class RouterExternalFixedIp : Pulumi.IIOProtobuf {
		public Pulumi.IO<string> IpAddress { get; set; }
		public Pulumi.IO<string> SubnetId { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Pulumi.Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("ip_address", Protobuf.ToProtobuf(IpAddress)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("subnet_id", Protobuf.ToProtobuf(SubnetId)));
		} // ToProtobuf

		public static RouterExternalFixedIp FromProtobuf(Google.Protobuf.WellKnownTypes.Value value) {
			var obj = value.StructValue;
			return new RouterExternalFixedIp() {
				IpAddress = Protobuf.ToString(obj.Fields["ip_address"]),
				SubnetId = Protobuf.ToString(obj.Fields["subnet_id"]),
			};
		} // FromProtobuf

	} // RouterExternalFixedIp

	public sealed class RouterVendorOption : Pulumi.IIOProtobuf {
		public Pulumi.IO<bool> SetRouterGatewayAfterCreate { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Pulumi.Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("set_router_gateway_after_create", Protobuf.ToProtobuf(SetRouterGatewayAfterCreate)));
		} // ToProtobuf

		public static RouterVendorOption FromProtobuf(Google.Protobuf.WellKnownTypes.Value value) {
			var obj = value.StructValue;
			return new RouterVendorOption() {
				SetRouterGatewayAfterCreate = Protobuf.ToBool(obj.Fields["set_router_gateway_after_create"]),
			};
		} // FromProtobuf

	} // RouterVendorOption

	/// <summary>
	/// The set of arguments for constructing a Router resource.
	/// </summary>
	public struct RouterArgs {
		/// <summary>
		/// Administrative up/down status for the router
		/// (must be "true" or "false" if provided). Changing this updates the
		/// `admin_state_up` of an existing router.
		/// </summary>
		public Pulumi.IO<bool> AdminStateUp { get; set; }

		/// <summary>
		/// An availability zone is used to make 
		/// network resources highly available. Used for resources with high availability so that they are scheduled on different availability zones. Changing
		/// this creates a new router.
		/// </summary>
		public Pulumi.IO<Pulumi.IO<string>[]> AvailabilityZoneHints { get; set; }

		/// <summary>
		/// Indicates whether or not to create a
		/// distributed router. The default policy setting in Neutron restricts
		/// usage of this property to administrative users only.
		/// </summary>
		public Pulumi.IO<bool> Distributed { get; set; }

		/// <summary>
		/// Enable Source NAT for the router. Valid values are
		/// "true" or "false". An `external_network_id` has to be set in order to
		/// set this property. Changing this updates the `enable_snat` of the router.
		/// </summary>
		public Pulumi.IO<bool> EnableSnat { get; set; }

		/// <summary>
		/// An external fixed IP for the router. This
		/// can be repeated. The structure is described below. An `external_network_id`
		/// has to be set in order to set this property. Changing this updates the
		/// external fixed IPs of the router.
		/// </summary>
		public Pulumi.IO<Pulumi.IO<RouterArgsExternalFixedIp>[]> ExternalFixedIps { get; set; }

		/// <summary>
		/// The
		/// network UUID of an external gateway for the router. A router with an
		/// external gateway is required if any compute instances or load balancers
		/// will be using floating IPs. Changing this updates the external gateway
		/// of an existing router.
		/// </summary>
		public Pulumi.IO<string> ExternalGateway { get; set; }

		/// <summary>
		/// The network UUID of an external gateway
		/// for the router. A router with an external gateway is required if any
		/// compute instances or load balancers will be using floating IPs. Changing
		/// this updates the external gateway of the router.
		/// </summary>
		public Pulumi.IO<string> ExternalNetworkId { get; set; }

		/// <summary>
		/// A unique name for the router. Changing this
		/// updates the `name` of an existing router.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 networking client.
		/// A networking client is needed to create a router. If omitted, the
		/// `region` argument of the provider is used. Changing this creates a new
		/// router.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// The owner of the floating IP. Required if admin wants
		/// to create a router for another tenant. Changing this creates a new router.
		/// </summary>
		public Pulumi.IO<string> TenantId { get; set; }

		/// <summary>
		/// Map of additional driver-specific options.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> ValueSpecs { get; set; }

		/// <summary>
		/// Map of additional vendor-specific options.
		/// Supported options are described below.
		/// </summary>
		public Pulumi.IO<RouterArgsVendorOption> VendorOptions { get; set; }

	} // RouterArgs

	/// <summary>
	/// Manages a V2 router resource within OpenStack.
	/// </summary>
	public class Router : Pulumi.CustomResource {
		/// <summary>
		/// Administrative up/down status for the router
		/// (must be "true" or "false" if provided). Changing this updates the
		/// `admin_state_up` of an existing router.
		/// </summary>
		public Pulumi.IO<bool> AdminStateUp { get; set; }

		/// <summary>
		/// An availability zone is used to make 
		/// network resources highly available. Used for resources with high availability so that they are scheduled on different availability zones. Changing
		/// this creates a new router.
		/// </summary>
		public Pulumi.IO<string[]> AvailabilityZoneHints { get; set; }

		/// <summary>
		/// Indicates whether or not to create a
		/// distributed router. The default policy setting in Neutron restricts
		/// usage of this property to administrative users only.
		/// </summary>
		public Pulumi.IO<bool> Distributed { get; set; }

		/// <summary>
		/// Enable Source NAT for the router. Valid values are
		/// "true" or "false". An `external_network_id` has to be set in order to
		/// set this property. Changing this updates the `enable_snat` of the router.
		/// </summary>
		public Pulumi.IO<bool> EnableSnat { get; set; }

		/// <summary>
		/// An external fixed IP for the router. This
		/// can be repeated. The structure is described below. An `external_network_id`
		/// has to be set in order to set this property. Changing this updates the
		/// external fixed IPs of the router.
		/// </summary>
		public Pulumi.IO<RouterExternalFixedIp[]> ExternalFixedIps { get; set; }

		/// <summary>
		/// The
		/// network UUID of an external gateway for the router. A router with an
		/// external gateway is required if any compute instances or load balancers
		/// will be using floating IPs. Changing this updates the external gateway
		/// of an existing router.
		/// </summary>
		public Pulumi.IO<string> ExternalGateway { get; set; }

		/// <summary>
		/// The network UUID of an external gateway
		/// for the router. A router with an external gateway is required if any
		/// compute instances or load balancers will be using floating IPs. Changing
		/// this updates the external gateway of the router.
		/// </summary>
		public Pulumi.IO<string> ExternalNetworkId { get; set; }

		/// <summary>
		/// A unique name for the router. Changing this
		/// updates the `name` of an existing router.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 networking client.
		/// A networking client is needed to create a router. If omitted, the
		/// `region` argument of the provider is used. Changing this creates a new
		/// router.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// The owner of the floating IP. Required if admin wants
		/// to create a router for another tenant. Changing this creates a new router.
		/// </summary>
		public Pulumi.IO<string> TenantId { get; set; }

		/// <summary>
		/// Map of additional driver-specific options.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> ValueSpecs { get; set; }

		/// <summary>
		/// Map of additional vendor-specific options.
		/// Supported options are described below.
		/// </summary>
		public Pulumi.IO<RouterVendorOption> VendorOptions { get; set; }

		public Router(string name, RouterArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("openstack:networking/router:Router", name, SerialiseArgs(args), opts) {
			AdminStateUp = Outputs["adminStateUp"].Select(item => Protobuf.ToBool(item));
			AvailabilityZoneHints = Outputs["availabilityZoneHints"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			Distributed = Outputs["distributed"].Select(item => Protobuf.ToBool(item));
			EnableSnat = Outputs["enableSnat"].Select(item => Protobuf.ToBool(item));
			ExternalFixedIps = Outputs["externalFixedIps"].Select(item => Protobuf.ToList(item, item1 => RouterExternalFixedIp.FromProtobuf(item1)));
			ExternalGateway = Outputs["externalGateway"].Select(item => Protobuf.ToString(item));
			ExternalNetworkId = Outputs["externalNetworkId"].Select(item => Protobuf.ToString(item));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			TenantId = Outputs["tenantId"].Select(item => Protobuf.ToString(item));
			ValueSpecs = Outputs["valueSpecs"].Select(item => Protobuf.ToMap(item));
			VendorOptions = Outputs["vendorOptions"].Select(item => RouterVendorOption.FromProtobuf(item));
			AdminStateUp = Outputs["adminStateUp"].Select(item => Protobuf.ToBool(item));
			AvailabilityZoneHints = Outputs["availabilityZoneHints"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			Distributed = Outputs["distributed"].Select(item => Protobuf.ToBool(item));
			EnableSnat = Outputs["enableSnat"].Select(item => Protobuf.ToBool(item));
			ExternalFixedIps = Outputs["externalFixedIps"].Select(item => Protobuf.ToList(item, item1 => RouterExternalFixedIp.FromProtobuf(item1)));
			ExternalGateway = Outputs["externalGateway"].Select(item => Protobuf.ToString(item));
			ExternalNetworkId = Outputs["externalNetworkId"].Select(item => Protobuf.ToString(item));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			TenantId = Outputs["tenantId"].Select(item => Protobuf.ToString(item));
			ValueSpecs = Outputs["valueSpecs"].Select(item => Protobuf.ToMap(item));
			VendorOptions = Outputs["vendorOptions"].Select(item => RouterVendorOption.FromProtobuf(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(RouterArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["adminStateUp"] = Protobuf.ToProtobuf(args.AdminStateUp);
			props["availabilityZoneHints"] = Protobuf.ToProtobuf(args.AvailabilityZoneHints, item => Protobuf.ToProtobuf(item));
			props["distributed"] = Protobuf.ToProtobuf(args.Distributed);
			props["enableSnat"] = Protobuf.ToProtobuf(args.EnableSnat);
			props["externalFixedIps"] = Protobuf.ToProtobuf(args.ExternalFixedIps, item => Protobuf.ToProtobuf(item));
			props["externalGateway"] = Protobuf.ToProtobuf(args.ExternalGateway);
			props["externalNetworkId"] = Protobuf.ToProtobuf(args.ExternalNetworkId);
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["region"] = Protobuf.ToProtobuf(args.Region);
			props["tenantId"] = Protobuf.ToProtobuf(args.TenantId);
			props["valueSpecs"] = Protobuf.ToProtobuf(args.ValueSpecs);
			props["vendorOptions"] = Protobuf.ToProtobuf(args.VendorOptions);
			return props;
		} // SerialiseArgs

	} // Router
} // Pulumi.Openstack.Networking
