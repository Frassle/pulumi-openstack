// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Openstack.Networking {

	/// <summary>
	/// The set of arguments for constructing a RouterInterface resource.
	/// </summary>
	public struct RouterInterfaceArgs {
		/// <summary>
		/// ID of the port this interface connects to. Changing
		/// this creates a new router interface.
		/// </summary>
		public Pulumi.IO<string> PortId { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 networking client.
		/// A networking client is needed to create a router. If omitted, the
		/// `region` argument of the provider is used. Changing this creates a new
		/// router interface.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// ID of the router this interface belongs to. Changing
		/// this creates a new router interface.
		/// </summary>
		public Pulumi.IO<string> RouterId { get; set; }

		/// <summary>
		/// ID of the subnet this interface connects to. Changing
		/// this creates a new router interface.
		/// </summary>
		public Pulumi.IO<string> SubnetId { get; set; }

	} // RouterInterfaceArgs

	/// <summary>
	/// Manages a V2 router interface resource within OpenStack.
	/// </summary>
	public class RouterInterface : Pulumi.CustomResource {
		/// <summary>
		/// ID of the port this interface connects to. Changing
		/// this creates a new router interface.
		/// </summary>
		public Pulumi.IO<string> PortId { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 networking client.
		/// A networking client is needed to create a router. If omitted, the
		/// `region` argument of the provider is used. Changing this creates a new
		/// router interface.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// ID of the router this interface belongs to. Changing
		/// this creates a new router interface.
		/// </summary>
		public Pulumi.IO<string> RouterId { get; set; }

		/// <summary>
		/// ID of the subnet this interface connects to. Changing
		/// this creates a new router interface.
		/// </summary>
		public Pulumi.IO<string> SubnetId { get; set; }

		public RouterInterface(string name, RouterInterfaceArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("openstack:networking/routerInterface:RouterInterface", name, SerialiseArgs(args), opts) {
			PortId = Outputs["portId"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			RouterId = Outputs["routerId"].Select(item => Protobuf.ToString(item));
			SubnetId = Outputs["subnetId"].Select(item => Protobuf.ToString(item));
			PortId = Outputs["portId"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			RouterId = Outputs["routerId"].Select(item => Protobuf.ToString(item));
			SubnetId = Outputs["subnetId"].Select(item => Protobuf.ToString(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(RouterInterfaceArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["portId"] = Protobuf.ToProtobuf(args.PortId);
			props["region"] = Protobuf.ToProtobuf(args.Region);
			props["routerId"] = Protobuf.ToProtobuf(args.RouterId);
			props["subnetId"] = Protobuf.ToProtobuf(args.SubnetId);
			return props;
		} // SerialiseArgs

	} // RouterInterface
} // Pulumi.Openstack.Networking
