// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Openstack.Networking {

	public sealed class GetSubnetAllocationPool : Pulumi.IProtobuf {
		public string End { get; set; }
		public string Start { get; set; }

		public Google.Protobuf.WellKnownTypes.Value ToProtobuf() {
			return Pulumi.Protobuf.ToProtobuf(
				new KeyValuePair<string, Google.Protobuf.WellKnownTypes.Value>("end", Protobuf.ToProtobuf(End)),
				new KeyValuePair<string, Google.Protobuf.WellKnownTypes.Value>("start", Protobuf.ToProtobuf(Start)));
		} // ToProtobuf

		public static GetSubnetAllocationPool FromProtobuf(Google.Protobuf.WellKnownTypes.Value value) {
			var obj = value.StructValue;
			return new GetSubnetAllocationPool() {
				End = Protobuf.ToString(obj.Fields["end"]),
				Start = Protobuf.ToString(obj.Fields["start"]),
			};
		} // FromProtobuf

	} // GetSubnetAllocationPool

	public sealed class GetSubnetHostRoute : Pulumi.IProtobuf {
		public string DestinationCidr { get; set; }
		public string NextHop { get; set; }

		public Google.Protobuf.WellKnownTypes.Value ToProtobuf() {
			return Pulumi.Protobuf.ToProtobuf(
				new KeyValuePair<string, Google.Protobuf.WellKnownTypes.Value>("destination_cidr", Protobuf.ToProtobuf(DestinationCidr)),
				new KeyValuePair<string, Google.Protobuf.WellKnownTypes.Value>("next_hop", Protobuf.ToProtobuf(NextHop)));
		} // ToProtobuf

		public static GetSubnetHostRoute FromProtobuf(Google.Protobuf.WellKnownTypes.Value value) {
			var obj = value.StructValue;
			return new GetSubnetHostRoute() {
				DestinationCidr = Protobuf.ToString(obj.Fields["destination_cidr"]),
				NextHop = Protobuf.ToString(obj.Fields["next_hop"]),
			};
		} // FromProtobuf

	} // GetSubnetHostRoute

	/// <summary>
	/// A collection of arguments for invoking getSubnet.
	/// </summary>
	public struct GetSubnetArgs {
		/// <summary>
		/// The CIDR of the subnet.
		/// </summary>
		public string Cidr { get; set; }

		/// <summary>
		/// If the subnet has DHCP disabled.
		/// </summary>
		public bool DhcpDisabled { get; set; }

		/// <summary>
		/// If the subnet has DHCP enabled.
		/// </summary>
		public bool DhcpEnabled { get; set; }

		/// <summary>
		/// The IP of the subnet's gateway.
		/// </summary>
		public string GatewayIp { get; set; }

		/// <summary>
		/// The IP version of the subnet (either 4 or 6).
		/// </summary>
		public int IpVersion { get; set; }

		/// <summary>
		/// The IPv6 address mode. Valid values are
		/// `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
		/// </summary>
		public string Ipv6AddressMode { get; set; }

		/// <summary>
		/// The IPv6 Router Advertisement mode. Valid values
		/// are `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
		/// </summary>
		public string Ipv6RaMode { get; set; }

		/// <summary>
		/// The name of the subnet.
		/// </summary>
		public string Name { get; set; }

		/// <summary>
		/// The ID of the network the subnet belongs to.
		/// </summary>
		public string NetworkId { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Neutron client.
		/// A Neutron client is needed to retrieve subnet ids. If omitted, the
		/// `region` argument of the provider is used.
		/// </summary>
		public string Region { get; set; }

		/// <summary>
		/// The ID of the subnet.
		/// </summary>
		public string SubnetId { get; set; }

		/// <summary>
		/// The ID of the subnetpool associated with the subnet.
		/// </summary>
		public string SubnetpoolId { get; set; }

		/// <summary>
		/// The owner of the subnet.
		/// </summary>
		public string TenantId { get; set; }

	} // GetSubnetArgs

	/// <summary>
	/// A collection of values returned by getSubnet.
	/// </summary>
	public struct GetSubnetResult {
		/// <summary>
		/// Allocation pools of the subnet.
		/// </summary>
		public GetSubnetAllocationPool[] AllocationPools { get; set; }

		public string Cidr { get; set; }

		/// <summary>
		/// DNS Nameservers of the subnet.
		/// </summary>
		public string[] DnsNameservers { get; set; }

		/// <summary>
		/// Whether the subnet has DHCP enabled or not.
		/// </summary>
		public bool EnableDhcp { get; set; }

		public string GatewayIp { get; set; }

		/// <summary>
		/// Host Routes of the subnet.
		/// </summary>
		public GetSubnetHostRoute[] HostRoutes { get; set; }

		public int IpVersion { get; set; }

		public string Ipv6AddressMode { get; set; }

		public string Ipv6RaMode { get; set; }

		public string Name { get; set; }

		public string NetworkId { get; set; }

		/// <summary>
		/// See Argument Reference above.
		/// </summary>
		public string Region { get; set; }

		public string SubnetId { get; set; }

		public string SubnetpoolId { get; set; }

		public string TenantId { get; set; }

		/// <summary>
		/// id is the provider-assigned unique ID for this managed resource.
		/// </summary>
		public string Id { get; set; }

	} // GetSubnetResult

	public static partial class NetworkingModule {
		/// <summary>
		/// Use this data source to get the ID of an available OpenStack subnet.
		/// </summary>
		public static System.Threading.Tasks.Task<GetSubnetResult> GetSubnet(GetSubnetArgs args, Pulumi.InvokeOptions opts = default(Pulumi.InvokeOptions)) {
			var invokeArgs = new Google.Protobuf.WellKnownTypes.Struct();
			invokeArgs.Fields["cidr"] = Protobuf.ToProtobuf(args.Cidr);
			invokeArgs.Fields["dhcpDisabled"] = Protobuf.ToProtobuf(args.DhcpDisabled);
			invokeArgs.Fields["dhcpEnabled"] = Protobuf.ToProtobuf(args.DhcpEnabled);
			invokeArgs.Fields["gatewayIp"] = Protobuf.ToProtobuf(args.GatewayIp);
			invokeArgs.Fields["ipVersion"] = Protobuf.ToProtobuf(args.IpVersion);
			invokeArgs.Fields["ipv6AddressMode"] = Protobuf.ToProtobuf(args.Ipv6AddressMode);
			invokeArgs.Fields["ipv6RaMode"] = Protobuf.ToProtobuf(args.Ipv6RaMode);
			invokeArgs.Fields["name"] = Protobuf.ToProtobuf(args.Name);
			invokeArgs.Fields["networkId"] = Protobuf.ToProtobuf(args.NetworkId);
			invokeArgs.Fields["region"] = Protobuf.ToProtobuf(args.Region);
			invokeArgs.Fields["subnetId"] = Protobuf.ToProtobuf(args.SubnetId);
			invokeArgs.Fields["subnetpoolId"] = Protobuf.ToProtobuf(args.SubnetpoolId);
			invokeArgs.Fields["tenantId"] = Protobuf.ToProtobuf(args.TenantId);

			var task = Pulumi.Runtime.InvokeAsync("openstack:networking/getSubnet:getSubnet", invokeArgs, opts);

			return task.ContinueWith(response => {
				var protobuf = response.Result;
				var result = new GetSubnetResult();
				if (protobuf.Fields.ContainsKey("allocationPools")) {
					result.AllocationPools = Protobuf.ToList(protobuf.Fields["allocationPools"], item => GetSubnetAllocationPool.FromProtobuf(item));
				}
				if (protobuf.Fields.ContainsKey("cidr")) {
					result.Cidr = Protobuf.ToString(protobuf.Fields["cidr"]);
				}
				if (protobuf.Fields.ContainsKey("dnsNameservers")) {
					result.DnsNameservers = Protobuf.ToList(protobuf.Fields["dnsNameservers"], item => Protobuf.ToString(item));
				}
				if (protobuf.Fields.ContainsKey("enableDhcp")) {
					result.EnableDhcp = Protobuf.ToBool(protobuf.Fields["enableDhcp"]);
				}
				if (protobuf.Fields.ContainsKey("gatewayIp")) {
					result.GatewayIp = Protobuf.ToString(protobuf.Fields["gatewayIp"]);
				}
				if (protobuf.Fields.ContainsKey("hostRoutes")) {
					result.HostRoutes = Protobuf.ToList(protobuf.Fields["hostRoutes"], item => GetSubnetHostRoute.FromProtobuf(item));
				}
				if (protobuf.Fields.ContainsKey("ipVersion")) {
					result.IpVersion = Protobuf.ToInt(protobuf.Fields["ipVersion"]);
				}
				if (protobuf.Fields.ContainsKey("ipv6AddressMode")) {
					result.Ipv6AddressMode = Protobuf.ToString(protobuf.Fields["ipv6AddressMode"]);
				}
				if (protobuf.Fields.ContainsKey("ipv6RaMode")) {
					result.Ipv6RaMode = Protobuf.ToString(protobuf.Fields["ipv6RaMode"]);
				}
				if (protobuf.Fields.ContainsKey("name")) {
					result.Name = Protobuf.ToString(protobuf.Fields["name"]);
				}
				if (protobuf.Fields.ContainsKey("networkId")) {
					result.NetworkId = Protobuf.ToString(protobuf.Fields["networkId"]);
				}
				if (protobuf.Fields.ContainsKey("region")) {
					result.Region = Protobuf.ToString(protobuf.Fields["region"]);
				}
				if (protobuf.Fields.ContainsKey("subnetId")) {
					result.SubnetId = Protobuf.ToString(protobuf.Fields["subnetId"]);
				}
				if (protobuf.Fields.ContainsKey("subnetpoolId")) {
					result.SubnetpoolId = Protobuf.ToString(protobuf.Fields["subnetpoolId"]);
				}
				if (protobuf.Fields.ContainsKey("tenantId")) {
					result.TenantId = Protobuf.ToString(protobuf.Fields["tenantId"]);
				}
				if (protobuf.Fields.ContainsKey("id")) {
					result.Id = Protobuf.ToString(protobuf.Fields["id"]);
				}
				return result;
			});
		} // GetSubnet

	} // NetworkingModule
} // Pulumi.Openstack.Networking
