// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Openstack.Networking {

	public sealed class SubnetArgsAllocationPool : Pulumi.IIOProtobuf {
		public Pulumi.IO<string> End { get; set; }
		public Pulumi.IO<string> Start { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Pulumi.Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("end", Protobuf.ToProtobuf(End)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("start", Protobuf.ToProtobuf(Start)));
		} // ToProtobuf

	} // SubnetArgsAllocationPool

	public sealed class SubnetArgsHostRoute : Pulumi.IIOProtobuf {
		public Pulumi.IO<string> DestinationCidr { get; set; }
		public Pulumi.IO<string> NextHop { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Pulumi.Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("destination_cidr", Protobuf.ToProtobuf(DestinationCidr)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("next_hop", Protobuf.ToProtobuf(NextHop)));
		} // ToProtobuf

	} // SubnetArgsHostRoute

	public sealed class SubnetAllocationPool : Pulumi.IIOProtobuf {
		public Pulumi.IO<string> End { get; set; }
		public Pulumi.IO<string> Start { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Pulumi.Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("end", Protobuf.ToProtobuf(End)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("start", Protobuf.ToProtobuf(Start)));
		} // ToProtobuf

		public static SubnetAllocationPool FromProtobuf(Google.Protobuf.WellKnownTypes.Value value) {
			var obj = value.StructValue;
			return new SubnetAllocationPool() {
				End = Protobuf.ToString(obj.Fields["end"]),
				Start = Protobuf.ToString(obj.Fields["start"]),
			};
		} // FromProtobuf

	} // SubnetAllocationPool

	public sealed class SubnetHostRoute : Pulumi.IIOProtobuf {
		public Pulumi.IO<string> DestinationCidr { get; set; }
		public Pulumi.IO<string> NextHop { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Pulumi.Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("destination_cidr", Protobuf.ToProtobuf(DestinationCidr)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("next_hop", Protobuf.ToProtobuf(NextHop)));
		} // ToProtobuf

		public static SubnetHostRoute FromProtobuf(Google.Protobuf.WellKnownTypes.Value value) {
			var obj = value.StructValue;
			return new SubnetHostRoute() {
				DestinationCidr = Protobuf.ToString(obj.Fields["destination_cidr"]),
				NextHop = Protobuf.ToString(obj.Fields["next_hop"]),
			};
		} // FromProtobuf

	} // SubnetHostRoute

	/// <summary>
	/// The set of arguments for constructing a Subnet resource.
	/// </summary>
	public struct SubnetArgs {
		/// <summary>
		/// An array of sub-ranges of CIDR available for
		/// dynamic allocation to ports. The allocation_pool object structure is
		/// documented below. Changing this creates a new subnet.
		/// </summary>
		public Pulumi.IO<Pulumi.IO<SubnetArgsAllocationPool>[]> AllocationPools { get; set; }

		/// <summary>
		/// CIDR representing IP range for this subnet, based on IP
		/// version. You can omit this option if you are creating a subnet from a
		/// subnet pool.
		/// </summary>
		public Pulumi.IO<string> Cidr { get; set; }

		/// <summary>
		/// An array of DNS name server names used by hosts
		/// in this subnet. Changing this updates the DNS name servers for the existing
		/// subnet.
		/// </summary>
		public Pulumi.IO<Pulumi.IO<string>[]> DnsNameservers { get; set; }

		/// <summary>
		/// The administrative state of the network.
		/// Acceptable values are "true" and "false". Changing this value enables or
		/// disables the DHCP capabilities of the existing subnet. Defaults to true.
		/// </summary>
		public Pulumi.IO<bool> EnableDhcp { get; set; }

		/// <summary>
		/// Default gateway used by devices in this subnet.
		/// Leaving this blank and not setting `no_gateway` will cause a default
		/// gateway of `.1` to be used. Changing this updates the gateway IP of the
		/// existing subnet.
		/// </summary>
		public Pulumi.IO<string> GatewayIp { get; set; }

		/// <summary>
		/// An array of routes that should be used by devices
		/// with IPs from this subnet (not including local subnet route). The host_route
		/// object structure is documented below. Changing this updates the host routes
		/// for the existing subnet.
		/// </summary>
		public Pulumi.IO<Pulumi.IO<SubnetArgsHostRoute>[]> HostRoutes { get; set; }

		/// <summary>
		/// IP version, either 4 (default) or 6. Changing this creates a
		/// new subnet.
		/// </summary>
		public Pulumi.IO<int> IpVersion { get; set; }

		/// <summary>
		/// The IPv6 address mode. Valid values are
		/// `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
		/// </summary>
		public Pulumi.IO<string> Ipv6AddressMode { get; set; }

		/// <summary>
		/// The IPv6 Router Advertisement mode. Valid values
		/// are `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
		/// </summary>
		public Pulumi.IO<string> Ipv6RaMode { get; set; }

		/// <summary>
		/// The name of the subnet. Changing this updates the name of
		/// the existing subnet.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The UUID of the parent network. Changing this
		/// creates a new subnet.
		/// </summary>
		public Pulumi.IO<string> NetworkId { get; set; }

		/// <summary>
		/// Do not set a gateway IP on this subnet. Changing
		/// this removes or adds a default gateway IP of the existing subnet.
		/// </summary>
		public Pulumi.IO<bool> NoGateway { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Networking client.
		/// A Networking client is needed to create a Neutron subnet. If omitted, the
		/// `region` argument of the provider is used. Changing this creates a new
		/// subnet.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// The ID of the subnetpool associated with the subnet.
		/// </summary>
		public Pulumi.IO<string> SubnetpoolId { get; set; }

		/// <summary>
		/// The owner of the subnet. Required if admin wants to
		/// create a subnet for another tenant. Changing this creates a new subnet.
		/// </summary>
		public Pulumi.IO<string> TenantId { get; set; }

		/// <summary>
		/// Map of additional options.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> ValueSpecs { get; set; }

	} // SubnetArgs

	/// <summary>
	/// Manages a V2 Neutron subnet resource within OpenStack.
	/// </summary>
	public class Subnet : Pulumi.CustomResource {
		/// <summary>
		/// An array of sub-ranges of CIDR available for
		/// dynamic allocation to ports. The allocation_pool object structure is
		/// documented below. Changing this creates a new subnet.
		/// </summary>
		public Pulumi.IO<SubnetAllocationPool[]> AllocationPools { get; set; }

		/// <summary>
		/// CIDR representing IP range for this subnet, based on IP
		/// version. You can omit this option if you are creating a subnet from a
		/// subnet pool.
		/// </summary>
		public Pulumi.IO<string> Cidr { get; set; }

		/// <summary>
		/// An array of DNS name server names used by hosts
		/// in this subnet. Changing this updates the DNS name servers for the existing
		/// subnet.
		/// </summary>
		public Pulumi.IO<string[]> DnsNameservers { get; set; }

		/// <summary>
		/// The administrative state of the network.
		/// Acceptable values are "true" and "false". Changing this value enables or
		/// disables the DHCP capabilities of the existing subnet. Defaults to true.
		/// </summary>
		public Pulumi.IO<bool> EnableDhcp { get; set; }

		/// <summary>
		/// Default gateway used by devices in this subnet.
		/// Leaving this blank and not setting `no_gateway` will cause a default
		/// gateway of `.1` to be used. Changing this updates the gateway IP of the
		/// existing subnet.
		/// </summary>
		public Pulumi.IO<string> GatewayIp { get; set; }

		/// <summary>
		/// An array of routes that should be used by devices
		/// with IPs from this subnet (not including local subnet route). The host_route
		/// object structure is documented below. Changing this updates the host routes
		/// for the existing subnet.
		/// </summary>
		public Pulumi.IO<SubnetHostRoute[]> HostRoutes { get; set; }

		/// <summary>
		/// IP version, either 4 (default) or 6. Changing this creates a
		/// new subnet.
		/// </summary>
		public Pulumi.IO<int> IpVersion { get; set; }

		/// <summary>
		/// The IPv6 address mode. Valid values are
		/// `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
		/// </summary>
		public Pulumi.IO<string> Ipv6AddressMode { get; set; }

		/// <summary>
		/// The IPv6 Router Advertisement mode. Valid values
		/// are `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
		/// </summary>
		public Pulumi.IO<string> Ipv6RaMode { get; set; }

		/// <summary>
		/// The name of the subnet. Changing this updates the name of
		/// the existing subnet.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The UUID of the parent network. Changing this
		/// creates a new subnet.
		/// </summary>
		public Pulumi.IO<string> NetworkId { get; set; }

		/// <summary>
		/// Do not set a gateway IP on this subnet. Changing
		/// this removes or adds a default gateway IP of the existing subnet.
		/// </summary>
		public Pulumi.IO<bool> NoGateway { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Networking client.
		/// A Networking client is needed to create a Neutron subnet. If omitted, the
		/// `region` argument of the provider is used. Changing this creates a new
		/// subnet.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// The ID of the subnetpool associated with the subnet.
		/// </summary>
		public Pulumi.IO<string> SubnetpoolId { get; set; }

		/// <summary>
		/// The owner of the subnet. Required if admin wants to
		/// create a subnet for another tenant. Changing this creates a new subnet.
		/// </summary>
		public Pulumi.IO<string> TenantId { get; set; }

		/// <summary>
		/// Map of additional options.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> ValueSpecs { get; set; }

		public Subnet(string name, SubnetArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("openstack:networking/subnet:Subnet", name, SerialiseArgs(args), opts) {
			AllocationPools = Outputs["allocationPools"].Select(item => Protobuf.ToList(item, item1 => SubnetAllocationPool.FromProtobuf(item1)));
			Cidr = Outputs["cidr"].Select(item => Protobuf.ToString(item));
			DnsNameservers = Outputs["dnsNameservers"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			EnableDhcp = Outputs["enableDhcp"].Select(item => Protobuf.ToBool(item));
			GatewayIp = Outputs["gatewayIp"].Select(item => Protobuf.ToString(item));
			HostRoutes = Outputs["hostRoutes"].Select(item => Protobuf.ToList(item, item1 => SubnetHostRoute.FromProtobuf(item1)));
			IpVersion = Outputs["ipVersion"].Select(item => Protobuf.ToInt(item));
			Ipv6AddressMode = Outputs["ipv6AddressMode"].Select(item => Protobuf.ToString(item));
			Ipv6RaMode = Outputs["ipv6RaMode"].Select(item => Protobuf.ToString(item));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			NetworkId = Outputs["networkId"].Select(item => Protobuf.ToString(item));
			NoGateway = Outputs["noGateway"].Select(item => Protobuf.ToBool(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			SubnetpoolId = Outputs["subnetpoolId"].Select(item => Protobuf.ToString(item));
			TenantId = Outputs["tenantId"].Select(item => Protobuf.ToString(item));
			ValueSpecs = Outputs["valueSpecs"].Select(item => Protobuf.ToMap(item));
			AllocationPools = Outputs["allocationPools"].Select(item => Protobuf.ToList(item, item1 => SubnetAllocationPool.FromProtobuf(item1)));
			Cidr = Outputs["cidr"].Select(item => Protobuf.ToString(item));
			DnsNameservers = Outputs["dnsNameservers"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			EnableDhcp = Outputs["enableDhcp"].Select(item => Protobuf.ToBool(item));
			GatewayIp = Outputs["gatewayIp"].Select(item => Protobuf.ToString(item));
			HostRoutes = Outputs["hostRoutes"].Select(item => Protobuf.ToList(item, item1 => SubnetHostRoute.FromProtobuf(item1)));
			IpVersion = Outputs["ipVersion"].Select(item => Protobuf.ToInt(item));
			Ipv6AddressMode = Outputs["ipv6AddressMode"].Select(item => Protobuf.ToString(item));
			Ipv6RaMode = Outputs["ipv6RaMode"].Select(item => Protobuf.ToString(item));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			NetworkId = Outputs["networkId"].Select(item => Protobuf.ToString(item));
			NoGateway = Outputs["noGateway"].Select(item => Protobuf.ToBool(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			SubnetpoolId = Outputs["subnetpoolId"].Select(item => Protobuf.ToString(item));
			TenantId = Outputs["tenantId"].Select(item => Protobuf.ToString(item));
			ValueSpecs = Outputs["valueSpecs"].Select(item => Protobuf.ToMap(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(SubnetArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["allocationPools"] = Protobuf.ToProtobuf(args.AllocationPools, item => Protobuf.ToProtobuf(item));
			props["cidr"] = Protobuf.ToProtobuf(args.Cidr);
			props["dnsNameservers"] = Protobuf.ToProtobuf(args.DnsNameservers, item => Protobuf.ToProtobuf(item));
			props["enableDhcp"] = Protobuf.ToProtobuf(args.EnableDhcp);
			props["gatewayIp"] = Protobuf.ToProtobuf(args.GatewayIp);
			props["hostRoutes"] = Protobuf.ToProtobuf(args.HostRoutes, item => Protobuf.ToProtobuf(item));
			props["ipVersion"] = Protobuf.ToProtobuf(args.IpVersion);
			props["ipv6AddressMode"] = Protobuf.ToProtobuf(args.Ipv6AddressMode);
			props["ipv6RaMode"] = Protobuf.ToProtobuf(args.Ipv6RaMode);
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["networkId"] = Protobuf.ToProtobuf(args.NetworkId);
			props["noGateway"] = Protobuf.ToProtobuf(args.NoGateway);
			props["region"] = Protobuf.ToProtobuf(args.Region);
			props["subnetpoolId"] = Protobuf.ToProtobuf(args.SubnetpoolId);
			props["tenantId"] = Protobuf.ToProtobuf(args.TenantId);
			props["valueSpecs"] = Protobuf.ToProtobuf(args.ValueSpecs);
			return props;
		} // SerialiseArgs

	} // Subnet
} // Pulumi.Openstack.Networking
