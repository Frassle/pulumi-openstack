// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Openstack.Networking {

	/// <summary>
	/// A collection of arguments for invoking getNetwork.
	/// </summary>
	public struct GetNetworkArgs {
		/// <summary>
		/// The external routing facility of the network.
		/// </summary>
		public bool External { get; set; }

		/// <summary>
		/// The CIDR of a subnet within the network.
		/// </summary>
		public string MatchingSubnetCidr { get; set; }

		/// <summary>
		/// The name of the network.
		/// </summary>
		public string Name { get; set; }

		/// <summary>
		/// The ID of the network.
		/// </summary>
		public string NetworkId { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Neutron client.
		/// A Neutron client is needed to retrieve networks ids. If omitted, the
		/// `region` argument of the provider is used.
		/// </summary>
		public string Region { get; set; }

		/// <summary>
		/// The status of the network.
		/// </summary>
		public string Status { get; set; }

		/// <summary>
		/// The owner of the network.
		/// </summary>
		public string TenantId { get; set; }

	} // GetNetworkArgs

	/// <summary>
	/// A collection of values returned by getNetwork.
	/// </summary>
	public struct GetNetworkResult {
		/// <summary>
		/// (Optional) The administrative state of the network.
		/// </summary>
		public string AdminStateUp { get; set; }

		/// <summary>
		/// (Optional) The availability zone candidates for the network.
		/// </summary>
		public string[] AvailabilityZoneHints { get; set; }

		/// <summary>
		/// See Argument Reference above.
		/// </summary>
		public string Region { get; set; }

		/// <summary>
		/// (Optional)  Specifies whether the network resource can be accessed
		/// by any tenant or not.
		/// </summary>
		public string Shared { get; set; }

		/// <summary>
		/// id is the provider-assigned unique ID for this managed resource.
		/// </summary>
		public string Id { get; set; }

	} // GetNetworkResult

	public static partial class NetworkingModule {
		/// <summary>
		/// Use this data source to get the ID of an available OpenStack network.
		/// </summary>
		public static System.Threading.Tasks.Task<GetNetworkResult> GetNetwork(GetNetworkArgs args, Pulumi.InvokeOptions opts = default(Pulumi.InvokeOptions)) {
			var invokeArgs = new Google.Protobuf.WellKnownTypes.Struct();
			invokeArgs.Fields["external"] = Protobuf.ToProtobuf(args.External);
			invokeArgs.Fields["matchingSubnetCidr"] = Protobuf.ToProtobuf(args.MatchingSubnetCidr);
			invokeArgs.Fields["name"] = Protobuf.ToProtobuf(args.Name);
			invokeArgs.Fields["networkId"] = Protobuf.ToProtobuf(args.NetworkId);
			invokeArgs.Fields["region"] = Protobuf.ToProtobuf(args.Region);
			invokeArgs.Fields["status"] = Protobuf.ToProtobuf(args.Status);
			invokeArgs.Fields["tenantId"] = Protobuf.ToProtobuf(args.TenantId);

			var task = Pulumi.Runtime.InvokeAsync("openstack:networking/getNetwork:getNetwork", invokeArgs, opts);

			return task.ContinueWith(response => {
				var protobuf = response.Result;
				var result = new GetNetworkResult();
				if (protobuf.Fields.ContainsKey("adminStateUp")) {
					result.AdminStateUp = Protobuf.ToString(protobuf.Fields["adminStateUp"]);
				}
				if (protobuf.Fields.ContainsKey("availabilityZoneHints")) {
					result.AvailabilityZoneHints = Protobuf.ToList(protobuf.Fields["availabilityZoneHints"], item => Protobuf.ToString(item));
				}
				if (protobuf.Fields.ContainsKey("region")) {
					result.Region = Protobuf.ToString(protobuf.Fields["region"]);
				}
				if (protobuf.Fields.ContainsKey("shared")) {
					result.Shared = Protobuf.ToString(protobuf.Fields["shared"]);
				}
				if (protobuf.Fields.ContainsKey("id")) {
					result.Id = Protobuf.ToString(protobuf.Fields["id"]);
				}
				return result;
			});
		} // GetNetwork

	} // NetworkingModule
} // Pulumi.Openstack.Networking
