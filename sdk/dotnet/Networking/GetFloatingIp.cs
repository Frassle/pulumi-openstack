// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Openstack.Networking {

	/// <summary>
	/// A collection of arguments for invoking getFloatingIp.
	/// </summary>
	public struct GetFloatingIpArgs {
		/// <summary>
		/// The IP address of the floating IP.
		/// </summary>
		public string Address { get; set; }

		/// <summary>
		/// The specific IP address of the internal port which should be associated with the floating IP.
		/// </summary>
		public string FixedIp { get; set; }

		/// <summary>
		/// The name of the pool from which the floating IP belongs to.
		/// </summary>
		public string Pool { get; set; }

		/// <summary>
		/// The ID of the port the floating IP is attached.
		/// </summary>
		public string PortId { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Neutron client.
		/// A Neutron client is needed to retrieve floating IP ids. If omitted, the
		/// `region` argument of the provider is used.
		/// </summary>
		public string Region { get; set; }

		public string Status { get; set; }

		/// <summary>
		/// The owner of the floating IP.
		/// </summary>
		public string TenantId { get; set; }

	} // GetFloatingIpArgs

	/// <summary>
	/// A collection of values returned by getFloatingIp.
	/// </summary>
	public struct GetFloatingIpResult {
		/// <summary>
		/// id is the provider-assigned unique ID for this managed resource.
		/// </summary>
		public string Id { get; set; }

	} // GetFloatingIpResult

	public static partial class NetworkingModule {
		/// <summary>
		/// Use this data source to get the ID of an available OpenStack floating IP.
		/// </summary>
		public static System.Threading.Tasks.Task<GetFloatingIpResult> GetFloatingIp(GetFloatingIpArgs args, Pulumi.InvokeOptions opts = default(Pulumi.InvokeOptions)) {
			var invokeArgs = new Google.Protobuf.WellKnownTypes.Struct();
			invokeArgs.Fields["address"] = Protobuf.ToProtobuf(args.Address);
			invokeArgs.Fields["fixedIp"] = Protobuf.ToProtobuf(args.FixedIp);
			invokeArgs.Fields["pool"] = Protobuf.ToProtobuf(args.Pool);
			invokeArgs.Fields["portId"] = Protobuf.ToProtobuf(args.PortId);
			invokeArgs.Fields["region"] = Protobuf.ToProtobuf(args.Region);
			invokeArgs.Fields["status"] = Protobuf.ToProtobuf(args.Status);
			invokeArgs.Fields["tenantId"] = Protobuf.ToProtobuf(args.TenantId);

			var task = Pulumi.Runtime.InvokeAsync("openstack:networking/getFloatingIp:getFloatingIp", invokeArgs, opts);

			return task.ContinueWith(response => {
				var protobuf = response.Result;
				var result = new GetFloatingIpResult();
				if (protobuf.Fields.ContainsKey("id")) {
					result.Id = Protobuf.ToString(protobuf.Fields["id"]);
				}
				return result;
			});
		} // GetFloatingIp

	} // NetworkingModule
} // Pulumi.Openstack.Networking
