// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Openstack.Loadbalancer {

	/// <summary>
	/// The set of arguments for constructing a PoolV1 resource.
	/// </summary>
	public struct PoolV1Args {
		/// <summary>
		/// The algorithm used to distribute load between the
		/// members of the pool. The current specification supports 'ROUND_ROBIN' and
		/// 'LEAST_CONNECTIONS' as valid values for this attribute.
		/// </summary>
		public Pulumi.IO<string> LbMethod { get; set; }

		/// <summary>
		/// The backend load balancing provider. For example:
		/// `haproxy`, `F5`, etc.
		/// </summary>
		public Pulumi.IO<string> LbProvider { get; set; }

		/// <summary>
		/// A list of IDs of monitors to associate with the
		/// pool.
		/// </summary>
		public Pulumi.IO<Pulumi.IO<string>[]> MonitorIds { get; set; }

		/// <summary>
		/// The name of the pool. Changing this updates the name of
		/// the existing pool.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The protocol used by the pool members, you can use
		/// either 'TCP, 'HTTP', or 'HTTPS'. Changing this creates a new pool.
		/// </summary>
		public Pulumi.IO<string> Protocol { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Networking client.
		/// A Networking client is needed to create an LB pool. If omitted, the
		/// `region` argument of the provider is used. Changing this creates a new
		/// LB pool.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// The network on which the members of the pool will be
		/// located. Only members that are on this network can be added to the pool.
		/// Changing this creates a new pool.
		/// </summary>
		public Pulumi.IO<string> SubnetId { get; set; }

		/// <summary>
		/// The owner of the pool. Required if admin wants to
		/// create a pool member for another tenant. Changing this creates a new pool.
		/// </summary>
		public Pulumi.IO<string> TenantId { get; set; }

	} // PoolV1Args

	/// <summary>
	/// Manages a V1 load balancer pool resource within OpenStack.
	/// </summary>
	public class PoolV1 : Pulumi.CustomResource {
		/// <summary>
		/// The algorithm used to distribute load between the
		/// members of the pool. The current specification supports 'ROUND_ROBIN' and
		/// 'LEAST_CONNECTIONS' as valid values for this attribute.
		/// </summary>
		public Pulumi.IO<string> LbMethod { get; set; }

		/// <summary>
		/// The backend load balancing provider. For example:
		/// `haproxy`, `F5`, etc.
		/// </summary>
		public Pulumi.IO<string> LbProvider { get; set; }

		/// <summary>
		/// A list of IDs of monitors to associate with the
		/// pool.
		/// </summary>
		public Pulumi.IO<string[]> MonitorIds { get; set; }

		/// <summary>
		/// The name of the pool. Changing this updates the name of
		/// the existing pool.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The protocol used by the pool members, you can use
		/// either 'TCP, 'HTTP', or 'HTTPS'. Changing this creates a new pool.
		/// </summary>
		public Pulumi.IO<string> Protocol { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Networking client.
		/// A Networking client is needed to create an LB pool. If omitted, the
		/// `region` argument of the provider is used. Changing this creates a new
		/// LB pool.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// The network on which the members of the pool will be
		/// located. Only members that are on this network can be added to the pool.
		/// Changing this creates a new pool.
		/// </summary>
		public Pulumi.IO<string> SubnetId { get; set; }

		/// <summary>
		/// The owner of the pool. Required if admin wants to
		/// create a pool member for another tenant. Changing this creates a new pool.
		/// </summary>
		public Pulumi.IO<string> TenantId { get; set; }

		public PoolV1(string name, PoolV1Args args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("openstack:loadbalancer/poolV1:PoolV1", name, SerialiseArgs(args), opts) {
			LbMethod = Outputs["lbMethod"].Select(item => Protobuf.ToString(item));
			LbProvider = Outputs["lbProvider"].Select(item => Protobuf.ToString(item));
			MonitorIds = Outputs["monitorIds"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Protocol = Outputs["protocol"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			SubnetId = Outputs["subnetId"].Select(item => Protobuf.ToString(item));
			TenantId = Outputs["tenantId"].Select(item => Protobuf.ToString(item));
			LbMethod = Outputs["lbMethod"].Select(item => Protobuf.ToString(item));
			LbProvider = Outputs["lbProvider"].Select(item => Protobuf.ToString(item));
			MonitorIds = Outputs["monitorIds"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Protocol = Outputs["protocol"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			SubnetId = Outputs["subnetId"].Select(item => Protobuf.ToString(item));
			TenantId = Outputs["tenantId"].Select(item => Protobuf.ToString(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(PoolV1Args args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["lbMethod"] = Protobuf.ToProtobuf(args.LbMethod);
			props["lbProvider"] = Protobuf.ToProtobuf(args.LbProvider);
			props["monitorIds"] = Protobuf.ToProtobuf(args.MonitorIds, item => Protobuf.ToProtobuf(item));
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["protocol"] = Protobuf.ToProtobuf(args.Protocol);
			props["region"] = Protobuf.ToProtobuf(args.Region);
			props["subnetId"] = Protobuf.ToProtobuf(args.SubnetId);
			props["tenantId"] = Protobuf.ToProtobuf(args.TenantId);
			return props;
		} // SerialiseArgs

	} // PoolV1
} // Pulumi.Openstack.Loadbalancer
