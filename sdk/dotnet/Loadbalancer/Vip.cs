// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Openstack.Loadbalancer {

	/// <summary>
	/// The set of arguments for constructing a Vip resource.
	/// </summary>
	public struct VipArgs {
		/// <summary>
		/// The IP address of the vip. Changing this creates a new
		/// vip.
		/// </summary>
		public Pulumi.IO<string> Address { get; set; }

		/// <summary>
		/// The administrative state of the vip.
		/// Acceptable values are "true" and "false". Changing this value updates the
		/// state of the existing vip.
		/// </summary>
		public Pulumi.IO<bool> AdminStateUp { get; set; }

		/// <summary>
		/// The maximum number of connections allowed for the
		/// vip. Default is -1, meaning no limit. Changing this updates the conn_limit
		/// of the existing vip.
		/// </summary>
		public Pulumi.IO<int> ConnLimit { get; set; }

		/// <summary>
		/// Human-readable description for the vip. Changing
		/// this updates the description of the existing vip.
		/// </summary>
		public Pulumi.IO<string> Description { get; set; }

		/// <summary>
		/// A *Networking* Floating IP that will be associated
		/// with the vip. The Floating IP must be provisioned already.
		/// </summary>
		public Pulumi.IO<string> FloatingIp { get; set; }

		/// <summary>
		/// The name of the vip. Changing this updates the name of
		/// the existing vip.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// Omit this field to prevent session persistence.
		/// The persistence object structure is documented below. Changing this updates
		/// the persistence of the existing vip.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> Persistence { get; set; }

		/// <summary>
		/// The ID of the pool with which the vip is associated.
		/// Changing this updates the pool_id of the existing vip.
		/// </summary>
		public Pulumi.IO<string> PoolId { get; set; }

		/// <summary>
		/// The port on which to listen for client traffic. Changing
		/// this creates a new vip.
		/// </summary>
		public Pulumi.IO<int> Port { get; set; }

		/// <summary>
		/// The protocol - can be either 'TCP, 'HTTP', or
		/// HTTPS'. Changing this creates a new vip.
		/// </summary>
		public Pulumi.IO<string> Protocol { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Networking client.
		/// A Networking client is needed to create a VIP. If omitted, the
		/// `region` argument of the provider is used. Changing this creates a new
		/// VIP.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// The network on which to allocate the vip's address. A
		/// tenant can only create vips on networks authorized by policy (e.g. networks
		/// that belong to them or networks that are shared). Changing this creates a
		/// new vip.
		/// </summary>
		public Pulumi.IO<string> SubnetId { get; set; }

		/// <summary>
		/// The owner of the vip. Required if admin wants to
		/// create a vip member for another tenant. Changing this creates a new vip.
		/// </summary>
		public Pulumi.IO<string> TenantId { get; set; }

	} // VipArgs

	/// <summary>
	/// Manages a V1 load balancer vip resource within OpenStack.
	/// </summary>
	public class Vip : Pulumi.CustomResource {
		/// <summary>
		/// The IP address of the vip. Changing this creates a new
		/// vip.
		/// </summary>
		public Pulumi.IO<string> Address { get; set; }

		/// <summary>
		/// The administrative state of the vip.
		/// Acceptable values are "true" and "false". Changing this value updates the
		/// state of the existing vip.
		/// </summary>
		public Pulumi.IO<bool> AdminStateUp { get; set; }

		/// <summary>
		/// The maximum number of connections allowed for the
		/// vip. Default is -1, meaning no limit. Changing this updates the conn_limit
		/// of the existing vip.
		/// </summary>
		public Pulumi.IO<int> ConnLimit { get; set; }

		/// <summary>
		/// Human-readable description for the vip. Changing
		/// this updates the description of the existing vip.
		/// </summary>
		public Pulumi.IO<string> Description { get; set; }

		/// <summary>
		/// A *Networking* Floating IP that will be associated
		/// with the vip. The Floating IP must be provisioned already.
		/// </summary>
		public Pulumi.IO<string> FloatingIp { get; set; }

		/// <summary>
		/// The name of the vip. Changing this updates the name of
		/// the existing vip.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// Omit this field to prevent session persistence.
		/// The persistence object structure is documented below. Changing this updates
		/// the persistence of the existing vip.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> Persistence { get; set; }

		/// <summary>
		/// The ID of the pool with which the vip is associated.
		/// Changing this updates the pool_id of the existing vip.
		/// </summary>
		public Pulumi.IO<string> PoolId { get; set; }

		/// <summary>
		/// The port on which to listen for client traffic. Changing
		/// this creates a new vip.
		/// </summary>
		public Pulumi.IO<int> Port { get; set; }

		/// <summary>
		/// Port UUID for this VIP at associated floating IP (if any).
		/// </summary>
		public Pulumi.IO<string> PortId { get; set; }

		/// <summary>
		/// The protocol - can be either 'TCP, 'HTTP', or
		/// HTTPS'. Changing this creates a new vip.
		/// </summary>
		public Pulumi.IO<string> Protocol { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Networking client.
		/// A Networking client is needed to create a VIP. If omitted, the
		/// `region` argument of the provider is used. Changing this creates a new
		/// VIP.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// The network on which to allocate the vip's address. A
		/// tenant can only create vips on networks authorized by policy (e.g. networks
		/// that belong to them or networks that are shared). Changing this creates a
		/// new vip.
		/// </summary>
		public Pulumi.IO<string> SubnetId { get; set; }

		/// <summary>
		/// The owner of the vip. Required if admin wants to
		/// create a vip member for another tenant. Changing this creates a new vip.
		/// </summary>
		public Pulumi.IO<string> TenantId { get; set; }

		public Vip(string name, VipArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("openstack:loadbalancer/vip:Vip", name, SerialiseArgs(args), opts) {
			Address = Outputs["address"].Select(item => Protobuf.ToString(item));
			AdminStateUp = Outputs["adminStateUp"].Select(item => Protobuf.ToBool(item));
			ConnLimit = Outputs["connLimit"].Select(item => Protobuf.ToInt(item));
			Description = Outputs["description"].Select(item => Protobuf.ToString(item));
			FloatingIp = Outputs["floatingIp"].Select(item => Protobuf.ToString(item));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Persistence = Outputs["persistence"].Select(item => Protobuf.ToMap(item));
			PoolId = Outputs["poolId"].Select(item => Protobuf.ToString(item));
			Port = Outputs["port"].Select(item => Protobuf.ToInt(item));
			Protocol = Outputs["protocol"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			SubnetId = Outputs["subnetId"].Select(item => Protobuf.ToString(item));
			TenantId = Outputs["tenantId"].Select(item => Protobuf.ToString(item));
			Address = Outputs["address"].Select(item => Protobuf.ToString(item));
			AdminStateUp = Outputs["adminStateUp"].Select(item => Protobuf.ToBool(item));
			ConnLimit = Outputs["connLimit"].Select(item => Protobuf.ToInt(item));
			Description = Outputs["description"].Select(item => Protobuf.ToString(item));
			FloatingIp = Outputs["floatingIp"].Select(item => Protobuf.ToString(item));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Persistence = Outputs["persistence"].Select(item => Protobuf.ToMap(item));
			PoolId = Outputs["poolId"].Select(item => Protobuf.ToString(item));
			Port = Outputs["port"].Select(item => Protobuf.ToInt(item));
			PortId = Outputs["portId"].Select(item => Protobuf.ToString(item));
			Protocol = Outputs["protocol"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			SubnetId = Outputs["subnetId"].Select(item => Protobuf.ToString(item));
			TenantId = Outputs["tenantId"].Select(item => Protobuf.ToString(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(VipArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["address"] = Protobuf.ToProtobuf(args.Address);
			props["adminStateUp"] = Protobuf.ToProtobuf(args.AdminStateUp);
			props["connLimit"] = Protobuf.ToProtobuf(args.ConnLimit);
			props["description"] = Protobuf.ToProtobuf(args.Description);
			props["floatingIp"] = Protobuf.ToProtobuf(args.FloatingIp);
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["persistence"] = Protobuf.ToProtobuf(args.Persistence);
			props["poolId"] = Protobuf.ToProtobuf(args.PoolId);
			props["port"] = Protobuf.ToProtobuf(args.Port);
			props["protocol"] = Protobuf.ToProtobuf(args.Protocol);
			props["region"] = Protobuf.ToProtobuf(args.Region);
			props["subnetId"] = Protobuf.ToProtobuf(args.SubnetId);
			props["tenantId"] = Protobuf.ToProtobuf(args.TenantId);
			props["portId"] = null; //out
			return props;
		} // SerialiseArgs

	} // Vip
} // Pulumi.Openstack.Loadbalancer
