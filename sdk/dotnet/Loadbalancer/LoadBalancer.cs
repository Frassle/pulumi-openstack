// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Openstack.Loadbalancer {

	/// <summary>
	/// The set of arguments for constructing a LoadBalancer resource.
	/// </summary>
	public struct LoadBalancerArgs {
		/// <summary>
		/// The administrative state of the Loadbalancer.
		/// A valid value is true (UP) or false (DOWN).
		/// </summary>
		public Pulumi.IO<bool> AdminStateUp { get; set; }

		/// <summary>
		/// Human-readable description for the Loadbalancer.
		/// </summary>
		public Pulumi.IO<string> Description { get; set; }

		/// <summary>
		/// The UUID of a flavor. Changing this creates a new
		/// loadbalancer.
		/// </summary>
		public Pulumi.IO<string> Flavor { get; set; }

		/// <summary>
		/// The name of the provider. Changing this
		/// creates a new loadbalancer.
		/// </summary>
		public Pulumi.IO<string> LoadbalancerProvider { get; set; }

		/// <summary>
		/// Human-readable name for the Loadbalancer. Does not have
		/// to be unique.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Networking client.
		/// A Networking client is needed to create an LB member. If omitted, the
		/// `region` argument of the provider is used. Changing this creates a new
		/// LB member.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// A list of security group IDs to apply to the
		/// loadbalancer. The security groups must be specified by ID and not name (as
		/// opposed to how they are configured with the Compute Instance).
		/// </summary>
		public Pulumi.IO<Pulumi.IO<string>[]> SecurityGroupIds { get; set; }

		/// <summary>
		/// Required for admins. The UUID of the tenant who owns
		/// the Loadbalancer.  Only administrative users can specify a tenant UUID
		/// other than their own.  Changing this creates a new loadbalancer.
		/// </summary>
		public Pulumi.IO<string> TenantId { get; set; }

		/// <summary>
		/// The ip address of the load balancer.
		/// Changing this creates a new loadbalancer.
		/// </summary>
		public Pulumi.IO<string> VipAddress { get; set; }

		/// <summary>
		/// The network on which to allocate the
		/// Loadbalancer's address. A tenant can only create Loadbalancers on networks
		/// authorized by policy (e.g. networks that belong to them or networks that
		/// are shared).  Changing this creates a new loadbalancer.
		/// </summary>
		public Pulumi.IO<string> VipSubnetId { get; set; }

	} // LoadBalancerArgs

	/// <summary>
	/// Manages a V2 loadbalancer resource within OpenStack.
	/// </summary>
	public class LoadBalancer : Pulumi.CustomResource {
		/// <summary>
		/// The administrative state of the Loadbalancer.
		/// A valid value is true (UP) or false (DOWN).
		/// </summary>
		public Pulumi.IO<bool> AdminStateUp { get; set; }

		/// <summary>
		/// Human-readable description for the Loadbalancer.
		/// </summary>
		public Pulumi.IO<string> Description { get; set; }

		/// <summary>
		/// The UUID of a flavor. Changing this creates a new
		/// loadbalancer.
		/// </summary>
		public Pulumi.IO<string> Flavor { get; set; }

		/// <summary>
		/// The name of the provider. Changing this
		/// creates a new loadbalancer.
		/// </summary>
		public Pulumi.IO<string> LoadbalancerProvider { get; set; }

		/// <summary>
		/// Human-readable name for the Loadbalancer. Does not have
		/// to be unique.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Networking client.
		/// A Networking client is needed to create an LB member. If omitted, the
		/// `region` argument of the provider is used. Changing this creates a new
		/// LB member.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// A list of security group IDs to apply to the
		/// loadbalancer. The security groups must be specified by ID and not name (as
		/// opposed to how they are configured with the Compute Instance).
		/// </summary>
		public Pulumi.IO<string[]> SecurityGroupIds { get; set; }

		/// <summary>
		/// Required for admins. The UUID of the tenant who owns
		/// the Loadbalancer.  Only administrative users can specify a tenant UUID
		/// other than their own.  Changing this creates a new loadbalancer.
		/// </summary>
		public Pulumi.IO<string> TenantId { get; set; }

		/// <summary>
		/// The ip address of the load balancer.
		/// Changing this creates a new loadbalancer.
		/// </summary>
		public Pulumi.IO<string> VipAddress { get; set; }

		/// <summary>
		/// The Port ID of the Load Balancer IP.
		/// </summary>
		public Pulumi.IO<string> VipPortId { get; set; }

		/// <summary>
		/// The network on which to allocate the
		/// Loadbalancer's address. A tenant can only create Loadbalancers on networks
		/// authorized by policy (e.g. networks that belong to them or networks that
		/// are shared).  Changing this creates a new loadbalancer.
		/// </summary>
		public Pulumi.IO<string> VipSubnetId { get; set; }

		public LoadBalancer(string name, LoadBalancerArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("openstack:loadbalancer/loadBalancer:LoadBalancer", name, SerialiseArgs(args), opts) {
			AdminStateUp = Outputs["adminStateUp"].Select(item => Protobuf.ToBool(item));
			Description = Outputs["description"].Select(item => Protobuf.ToString(item));
			Flavor = Outputs["flavor"].Select(item => Protobuf.ToString(item));
			LoadbalancerProvider = Outputs["loadbalancerProvider"].Select(item => Protobuf.ToString(item));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			SecurityGroupIds = Outputs["securityGroupIds"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			TenantId = Outputs["tenantId"].Select(item => Protobuf.ToString(item));
			VipAddress = Outputs["vipAddress"].Select(item => Protobuf.ToString(item));
			VipSubnetId = Outputs["vipSubnetId"].Select(item => Protobuf.ToString(item));
			AdminStateUp = Outputs["adminStateUp"].Select(item => Protobuf.ToBool(item));
			Description = Outputs["description"].Select(item => Protobuf.ToString(item));
			Flavor = Outputs["flavor"].Select(item => Protobuf.ToString(item));
			LoadbalancerProvider = Outputs["loadbalancerProvider"].Select(item => Protobuf.ToString(item));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			SecurityGroupIds = Outputs["securityGroupIds"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			TenantId = Outputs["tenantId"].Select(item => Protobuf.ToString(item));
			VipAddress = Outputs["vipAddress"].Select(item => Protobuf.ToString(item));
			VipPortId = Outputs["vipPortId"].Select(item => Protobuf.ToString(item));
			VipSubnetId = Outputs["vipSubnetId"].Select(item => Protobuf.ToString(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(LoadBalancerArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["adminStateUp"] = Protobuf.ToProtobuf(args.AdminStateUp);
			props["description"] = Protobuf.ToProtobuf(args.Description);
			props["flavor"] = Protobuf.ToProtobuf(args.Flavor);
			props["loadbalancerProvider"] = Protobuf.ToProtobuf(args.LoadbalancerProvider);
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["region"] = Protobuf.ToProtobuf(args.Region);
			props["securityGroupIds"] = Protobuf.ToProtobuf(args.SecurityGroupIds, item => Protobuf.ToProtobuf(item));
			props["tenantId"] = Protobuf.ToProtobuf(args.TenantId);
			props["vipAddress"] = Protobuf.ToProtobuf(args.VipAddress);
			props["vipSubnetId"] = Protobuf.ToProtobuf(args.VipSubnetId);
			props["vipPortId"] = null; //out
			return props;
		} // SerialiseArgs

	} // LoadBalancer
} // Pulumi.Openstack.Loadbalancer
