// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Openstack.Dns {

	/// <summary>
	/// The set of arguments for constructing a RecordSet resource.
	/// </summary>
	public struct RecordSetArgs {
		/// <summary>
		/// A description of the  record set.
		/// </summary>
		public Pulumi.IO<string> Description { get; set; }

		/// <summary>
		/// The name of the record set. Note the `.` at the end of the name.
		/// Changing this creates a new DNS  record set.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// An array of DNS records.
		/// </summary>
		public Pulumi.IO<Pulumi.IO<string>[]> Records { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 DNS client.
		/// If omitted, the `region` argument of the provider is used.
		/// Changing this creates a new DNS  record set.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// The time to live (TTL) of the record set.
		/// </summary>
		public Pulumi.IO<int> Ttl { get; set; }

		/// <summary>
		/// The type of record set. Examples: "A", "MX".
		/// Changing this creates a new DNS  record set.
		/// </summary>
		public Pulumi.IO<string> Type { get; set; }

		/// <summary>
		/// Map of additional options. Changing this creates a
		/// new record set.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> ValueSpecs { get; set; }

		/// <summary>
		/// The ID of the zone in which to create the record set.
		/// Changing this creates a new DNS  record set.
		/// </summary>
		public Pulumi.IO<string> ZoneId { get; set; }

	} // RecordSetArgs

	/// <summary>
	/// Manages a DNS record set in the OpenStack DNS Service.
	/// </summary>
	public class RecordSet : Pulumi.CustomResource {
		/// <summary>
		/// A description of the  record set.
		/// </summary>
		public Pulumi.IO<string> Description { get; set; }

		/// <summary>
		/// The name of the record set. Note the `.` at the end of the name.
		/// Changing this creates a new DNS  record set.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// An array of DNS records.
		/// </summary>
		public Pulumi.IO<string[]> Records { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 DNS client.
		/// If omitted, the `region` argument of the provider is used.
		/// Changing this creates a new DNS  record set.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// The time to live (TTL) of the record set.
		/// </summary>
		public Pulumi.IO<int> Ttl { get; set; }

		/// <summary>
		/// The type of record set. Examples: "A", "MX".
		/// Changing this creates a new DNS  record set.
		/// </summary>
		public Pulumi.IO<string> Type { get; set; }

		/// <summary>
		/// Map of additional options. Changing this creates a
		/// new record set.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> ValueSpecs { get; set; }

		/// <summary>
		/// The ID of the zone in which to create the record set.
		/// Changing this creates a new DNS  record set.
		/// </summary>
		public Pulumi.IO<string> ZoneId { get; set; }

		public RecordSet(string name, RecordSetArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("openstack:dns/recordSet:RecordSet", name, SerialiseArgs(args), opts) {
			Description = Outputs["description"].Select(item => Protobuf.ToString(item));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Records = Outputs["records"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			Ttl = Outputs["ttl"].Select(item => Protobuf.ToInt(item));
			Type = Outputs["type"].Select(item => Protobuf.ToString(item));
			ValueSpecs = Outputs["valueSpecs"].Select(item => Protobuf.ToMap(item));
			ZoneId = Outputs["zoneId"].Select(item => Protobuf.ToString(item));
			Description = Outputs["description"].Select(item => Protobuf.ToString(item));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Records = Outputs["records"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			Ttl = Outputs["ttl"].Select(item => Protobuf.ToInt(item));
			Type = Outputs["type"].Select(item => Protobuf.ToString(item));
			ValueSpecs = Outputs["valueSpecs"].Select(item => Protobuf.ToMap(item));
			ZoneId = Outputs["zoneId"].Select(item => Protobuf.ToString(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(RecordSetArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["description"] = Protobuf.ToProtobuf(args.Description);
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["records"] = Protobuf.ToProtobuf(args.Records, item => Protobuf.ToProtobuf(item));
			props["region"] = Protobuf.ToProtobuf(args.Region);
			props["ttl"] = Protobuf.ToProtobuf(args.Ttl);
			props["type"] = Protobuf.ToProtobuf(args.Type);
			props["valueSpecs"] = Protobuf.ToProtobuf(args.ValueSpecs);
			props["zoneId"] = Protobuf.ToProtobuf(args.ZoneId);
			return props;
		} // SerialiseArgs

	} // RecordSet
} // Pulumi.Openstack.Dns
