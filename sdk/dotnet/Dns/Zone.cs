// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Openstack.Dns {

	/// <summary>
	/// The set of arguments for constructing a Zone resource.
	/// </summary>
	public struct ZoneArgs {
		/// <summary>
		/// Attributes for the DNS Service scheduler.
		/// Changing this creates a new zone.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> Attributes { get; set; }

		/// <summary>
		/// A description of the zone.
		/// </summary>
		public Pulumi.IO<string> Description { get; set; }

		/// <summary>
		/// The email contact for the zone record.
		/// </summary>
		public Pulumi.IO<string> Email { get; set; }

		/// <summary>
		/// An array of master DNS servers. For when `type` is
		/// `SECONDARY`.
		/// </summary>
		public Pulumi.IO<Pulumi.IO<string>[]> Masters { get; set; }

		/// <summary>
		/// The name of the zone. Note the `.` at the end of the name.
		/// Changing this creates a new DNS zone.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Compute client.
		/// Keypairs are associated with accounts, but a Compute client is needed to
		/// create one. If omitted, the `region` argument of the provider is used.
		/// Changing this creates a new DNS zone.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// The time to live (TTL) of the zone.
		/// </summary>
		public Pulumi.IO<int> Ttl { get; set; }

		/// <summary>
		/// The type of zone. Can either be `PRIMARY` or `SECONDARY`.
		/// Changing this creates a new zone.
		/// </summary>
		public Pulumi.IO<string> Type { get; set; }

		/// <summary>
		/// Map of additional options. Changing this creates a
		/// new zone.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> ValueSpecs { get; set; }

	} // ZoneArgs

	/// <summary>
	/// Manages a DNS zone in the OpenStack DNS Service.
	/// </summary>
	public class Zone : Pulumi.CustomResource {
		/// <summary>
		/// Attributes for the DNS Service scheduler.
		/// Changing this creates a new zone.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> Attributes { get; set; }

		/// <summary>
		/// A description of the zone.
		/// </summary>
		public Pulumi.IO<string> Description { get; set; }

		/// <summary>
		/// The email contact for the zone record.
		/// </summary>
		public Pulumi.IO<string> Email { get; set; }

		/// <summary>
		/// An array of master DNS servers. For when `type` is
		/// `SECONDARY`.
		/// </summary>
		public Pulumi.IO<string[]> Masters { get; set; }

		/// <summary>
		/// The name of the zone. Note the `.` at the end of the name.
		/// Changing this creates a new DNS zone.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Compute client.
		/// Keypairs are associated with accounts, but a Compute client is needed to
		/// create one. If omitted, the `region` argument of the provider is used.
		/// Changing this creates a new DNS zone.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// The time to live (TTL) of the zone.
		/// </summary>
		public Pulumi.IO<int> Ttl { get; set; }

		/// <summary>
		/// The type of zone. Can either be `PRIMARY` or `SECONDARY`.
		/// Changing this creates a new zone.
		/// </summary>
		public Pulumi.IO<string> Type { get; set; }

		/// <summary>
		/// Map of additional options. Changing this creates a
		/// new zone.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> ValueSpecs { get; set; }

		public Zone(string name, ZoneArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("openstack:dns/zone:Zone", name, SerialiseArgs(args), opts) {
			Attributes = Outputs["attributes"].Select(item => Protobuf.ToMap(item));
			Description = Outputs["description"].Select(item => Protobuf.ToString(item));
			Email = Outputs["email"].Select(item => Protobuf.ToString(item));
			Masters = Outputs["masters"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			Ttl = Outputs["ttl"].Select(item => Protobuf.ToInt(item));
			Type = Outputs["type"].Select(item => Protobuf.ToString(item));
			ValueSpecs = Outputs["valueSpecs"].Select(item => Protobuf.ToMap(item));
			Attributes = Outputs["attributes"].Select(item => Protobuf.ToMap(item));
			Description = Outputs["description"].Select(item => Protobuf.ToString(item));
			Email = Outputs["email"].Select(item => Protobuf.ToString(item));
			Masters = Outputs["masters"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			Ttl = Outputs["ttl"].Select(item => Protobuf.ToInt(item));
			Type = Outputs["type"].Select(item => Protobuf.ToString(item));
			ValueSpecs = Outputs["valueSpecs"].Select(item => Protobuf.ToMap(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(ZoneArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["attributes"] = Protobuf.ToProtobuf(args.Attributes);
			props["description"] = Protobuf.ToProtobuf(args.Description);
			props["email"] = Protobuf.ToProtobuf(args.Email);
			props["masters"] = Protobuf.ToProtobuf(args.Masters, item => Protobuf.ToProtobuf(item));
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["region"] = Protobuf.ToProtobuf(args.Region);
			props["ttl"] = Protobuf.ToProtobuf(args.Ttl);
			props["type"] = Protobuf.ToProtobuf(args.Type);
			props["valueSpecs"] = Protobuf.ToProtobuf(args.ValueSpecs);
			return props;
		} // SerialiseArgs

	} // Zone
} // Pulumi.Openstack.Dns
