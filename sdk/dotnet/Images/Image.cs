// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Openstack.Images {

	/// <summary>
	/// The set of arguments for constructing a Image resource.
	/// </summary>
	public struct ImageArgs {
		/// <summary>
		/// The container format. Must be one of
		/// "ami", "ari", "aki", "bare", "ovf".
		/// </summary>
		public Pulumi.IO<string> ContainerFormat { get; set; }

		/// <summary>
		/// The disk format. Must be one of
		/// "ami", "ari", "aki", "vhd", "vmdk", "raw", "qcow2", "vdi", "iso".
		/// </summary>
		public Pulumi.IO<string> DiskFormat { get; set; }

		/// <summary>
		/// This is the directory where the images will
		/// be downloaded. Images will be stored with a filename corresponding to
		/// the url's md5 hash. Defaults to "$HOME/.terraform/image_cache"
		/// </summary>
		public Pulumi.IO<string> ImageCachePath { get; set; }

		/// <summary>
		/// This is the url of the raw image that will
		/// be downloaded in the `image_cache_path` before being uploaded to Glance.
		/// Glance is able to download image from internet but the `gophercloud` library
		/// does not yet provide a way to do so.
		/// Conflicts with `local_file_path`.
		/// </summary>
		public Pulumi.IO<string> ImageSourceUrl { get; set; }

		/// <summary>
		/// This is the filepath of the raw image file
		/// that will be uploaded to Glance. Conflicts with `image_source_url`.
		/// </summary>
		public Pulumi.IO<string> LocalFilePath { get; set; }

		/// <summary>
		/// Amount of disk space (in GB) required to boot image.
		/// Defaults to 0.
		/// </summary>
		public Pulumi.IO<int> MinDiskGb { get; set; }

		/// <summary>
		/// Amount of ram (in MB) required to boot image.
		/// Defauts to 0.
		/// </summary>
		public Pulumi.IO<int> MinRamMb { get; set; }

		/// <summary>
		/// The name of the image.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// A map of key/value pairs to set freeform
		/// information about an image.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> Properties { get; set; }

		/// <summary>
		/// If true, image will not be deletable.
		/// Defaults to false.
		/// </summary>
		public Pulumi.IO<bool> Protected { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Glance client.
		/// A Glance client is needed to create an Image that can be used with
		/// a compute instance. If omitted, the `region` argument of the provider
		/// is used. Changing this creates a new Image.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// The tags of the image. It must be a list of strings.
		/// At this time, it is not possible to delete all tags of an image.
		/// </summary>
		public Pulumi.IO<Pulumi.IO<string>[]> Tags { get; set; }

		/// <summary>
		/// If false, the checksum will not be verified
		/// once the image is finished uploading. Defaults to true.
		/// </summary>
		public Pulumi.IO<bool> VerifyChecksum { get; set; }

		/// <summary>
		/// The visibility of the image. Must be one of
		/// "public", "private", "community", or "shared". The ability to set the
		/// visibility depends upon the configuration of the OpenStack cloud.
		/// </summary>
		public Pulumi.IO<string> Visibility { get; set; }

	} // ImageArgs

	/// <summary>
	/// Manages a V2 Image resource within OpenStack Glance.
	/// </summary>
	public class Image : Pulumi.CustomResource {
		/// <summary>
		/// The checksum of the data associated with the image.
		/// </summary>
		public Pulumi.IO<string> Checksum { get; set; }

		/// <summary>
		/// The container format. Must be one of
		/// "ami", "ari", "aki", "bare", "ovf".
		/// </summary>
		public Pulumi.IO<string> ContainerFormat { get; set; }

		/// <summary>
		/// The date the image was created.
		/// </summary>
		public Pulumi.IO<string> CreatedAt { get; set; }

		/// <summary>
		/// The disk format. Must be one of
		/// "ami", "ari", "aki", "vhd", "vmdk", "raw", "qcow2", "vdi", "iso".
		/// </summary>
		public Pulumi.IO<string> DiskFormat { get; set; }

		/// <summary>
		/// the trailing path after the glance
		/// endpoint that represent the location of the image
		/// or the path to retrieve it.
		/// </summary>
		public Pulumi.IO<string> File { get; set; }

		/// <summary>
		/// This is the directory where the images will
		/// be downloaded. Images will be stored with a filename corresponding to
		/// the url's md5 hash. Defaults to "$HOME/.terraform/image_cache"
		/// </summary>
		public Pulumi.IO<string> ImageCachePath { get; set; }

		/// <summary>
		/// This is the url of the raw image that will
		/// be downloaded in the `image_cache_path` before being uploaded to Glance.
		/// Glance is able to download image from internet but the `gophercloud` library
		/// does not yet provide a way to do so.
		/// Conflicts with `local_file_path`.
		/// </summary>
		public Pulumi.IO<string> ImageSourceUrl { get; set; }

		/// <summary>
		/// This is the filepath of the raw image file
		/// that will be uploaded to Glance. Conflicts with `image_source_url`.
		/// </summary>
		public Pulumi.IO<string> LocalFilePath { get; set; }

		/// <summary>
		/// The metadata associated with the image.
		/// Image metadata allow for meaningfully define the image properties
		/// and tags. See http://docs.openstack.org/developer/glance/metadefs-concepts.html.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> Metadata { get; set; }

		/// <summary>
		/// Amount of disk space (in GB) required to boot image.
		/// Defaults to 0.
		/// </summary>
		public Pulumi.IO<int> MinDiskGb { get; set; }

		/// <summary>
		/// Amount of ram (in MB) required to boot image.
		/// Defauts to 0.
		/// </summary>
		public Pulumi.IO<int> MinRamMb { get; set; }

		/// <summary>
		/// The name of the image.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The id of the openstack user who owns the image.
		/// </summary>
		public Pulumi.IO<string> Owner { get; set; }

		/// <summary>
		/// A map of key/value pairs to set freeform
		/// information about an image.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> Properties { get; set; }

		/// <summary>
		/// If true, image will not be deletable.
		/// Defaults to false.
		/// </summary>
		public Pulumi.IO<bool> Protected { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Glance client.
		/// A Glance client is needed to create an Image that can be used with
		/// a compute instance. If omitted, the `region` argument of the provider
		/// is used. Changing this creates a new Image.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// The path to the JSON-schema that represent
		/// the image or image
		/// </summary>
		public Pulumi.IO<string> Schema { get; set; }

		/// <summary>
		/// The size in bytes of the data associated with the image.
		/// </summary>
		public Pulumi.IO<int> SizeBytes { get; set; }

		/// <summary>
		/// The status of the image. It can be "queued", "active"
		/// or "saving".
		/// </summary>
		public Pulumi.IO<string> Status { get; set; }

		/// <summary>
		/// The tags of the image. It must be a list of strings.
		/// At this time, it is not possible to delete all tags of an image.
		/// </summary>
		public Pulumi.IO<string[]> Tags { get; set; }

		/// <summary>
		/// The date the image was last updated.
		/// </summary>
		public Pulumi.IO<string> UpdateAt { get; set; }

		/// <summary>
		/// If false, the checksum will not be verified
		/// once the image is finished uploading. Defaults to true.
		/// </summary>
		public Pulumi.IO<bool> VerifyChecksum { get; set; }

		/// <summary>
		/// The visibility of the image. Must be one of
		/// "public", "private", "community", or "shared". The ability to set the
		/// visibility depends upon the configuration of the OpenStack cloud.
		/// </summary>
		public Pulumi.IO<string> Visibility { get; set; }

		public Image(string name, ImageArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("openstack:images/image:Image", name, SerialiseArgs(args), opts) {
			ContainerFormat = Outputs["containerFormat"].Select(item => Protobuf.ToString(item));
			DiskFormat = Outputs["diskFormat"].Select(item => Protobuf.ToString(item));
			ImageCachePath = Outputs["imageCachePath"].Select(item => Protobuf.ToString(item));
			ImageSourceUrl = Outputs["imageSourceUrl"].Select(item => Protobuf.ToString(item));
			LocalFilePath = Outputs["localFilePath"].Select(item => Protobuf.ToString(item));
			MinDiskGb = Outputs["minDiskGb"].Select(item => Protobuf.ToInt(item));
			MinRamMb = Outputs["minRamMb"].Select(item => Protobuf.ToInt(item));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Properties = Outputs["properties"].Select(item => Protobuf.ToMap(item));
			Protected = Outputs["protected"].Select(item => Protobuf.ToBool(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			Tags = Outputs["tags"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			VerifyChecksum = Outputs["verifyChecksum"].Select(item => Protobuf.ToBool(item));
			Visibility = Outputs["visibility"].Select(item => Protobuf.ToString(item));
			Checksum = Outputs["checksum"].Select(item => Protobuf.ToString(item));
			ContainerFormat = Outputs["containerFormat"].Select(item => Protobuf.ToString(item));
			CreatedAt = Outputs["createdAt"].Select(item => Protobuf.ToString(item));
			DiskFormat = Outputs["diskFormat"].Select(item => Protobuf.ToString(item));
			File = Outputs["file"].Select(item => Protobuf.ToString(item));
			ImageCachePath = Outputs["imageCachePath"].Select(item => Protobuf.ToString(item));
			ImageSourceUrl = Outputs["imageSourceUrl"].Select(item => Protobuf.ToString(item));
			LocalFilePath = Outputs["localFilePath"].Select(item => Protobuf.ToString(item));
			Metadata = Outputs["metadata"].Select(item => Protobuf.ToMap(item));
			MinDiskGb = Outputs["minDiskGb"].Select(item => Protobuf.ToInt(item));
			MinRamMb = Outputs["minRamMb"].Select(item => Protobuf.ToInt(item));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Owner = Outputs["owner"].Select(item => Protobuf.ToString(item));
			Properties = Outputs["properties"].Select(item => Protobuf.ToMap(item));
			Protected = Outputs["protected"].Select(item => Protobuf.ToBool(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			Schema = Outputs["schema"].Select(item => Protobuf.ToString(item));
			SizeBytes = Outputs["sizeBytes"].Select(item => Protobuf.ToInt(item));
			Status = Outputs["status"].Select(item => Protobuf.ToString(item));
			Tags = Outputs["tags"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			UpdateAt = Outputs["updateAt"].Select(item => Protobuf.ToString(item));
			VerifyChecksum = Outputs["verifyChecksum"].Select(item => Protobuf.ToBool(item));
			Visibility = Outputs["visibility"].Select(item => Protobuf.ToString(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(ImageArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["containerFormat"] = Protobuf.ToProtobuf(args.ContainerFormat);
			props["diskFormat"] = Protobuf.ToProtobuf(args.DiskFormat);
			props["imageCachePath"] = Protobuf.ToProtobuf(args.ImageCachePath);
			props["imageSourceUrl"] = Protobuf.ToProtobuf(args.ImageSourceUrl);
			props["localFilePath"] = Protobuf.ToProtobuf(args.LocalFilePath);
			props["minDiskGb"] = Protobuf.ToProtobuf(args.MinDiskGb);
			props["minRamMb"] = Protobuf.ToProtobuf(args.MinRamMb);
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["properties"] = Protobuf.ToProtobuf(args.Properties);
			props["protected"] = Protobuf.ToProtobuf(args.Protected);
			props["region"] = Protobuf.ToProtobuf(args.Region);
			props["tags"] = Protobuf.ToProtobuf(args.Tags, item => Protobuf.ToProtobuf(item));
			props["verifyChecksum"] = Protobuf.ToProtobuf(args.VerifyChecksum);
			props["visibility"] = Protobuf.ToProtobuf(args.Visibility);
			props["checksum"] = null; //out
			props["createdAt"] = null; //out
			props["file"] = null; //out
			props["metadata"] = null; //out
			props["owner"] = null; //out
			props["schema"] = null; //out
			props["sizeBytes"] = null; //out
			props["status"] = null; //out
			props["updateAt"] = null; //out
			return props;
		} // SerialiseArgs

	} // Image
} // Pulumi.Openstack.Images
