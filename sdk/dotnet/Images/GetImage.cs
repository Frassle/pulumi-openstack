// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Openstack.Images {

	/// <summary>
	/// A collection of arguments for invoking getImage.
	/// </summary>
	public struct GetImageArgs {
		/// <summary>
		/// The status of the image. Must be one of
		/// "accepted", "pending", "rejected", or "all".
		/// </summary>
		public string MemberStatus { get; set; }

		/// <summary>
		/// If more than one result is returned, use the most
		/// recent image.
		/// </summary>
		public bool MostRecent { get; set; }

		/// <summary>
		/// The name of the image.
		/// </summary>
		public string Name { get; set; }

		/// <summary>
		/// The owner (UUID) of the image.
		/// </summary>
		public string Owner { get; set; }

		/// <summary>
		/// a map of key/value pairs to match an image with.
		/// All specified properties must be matched.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Glance client.
		/// A Glance client is needed to create an Image that can be used with
		/// a compute instance. If omitted, the `region` argument of the provider
		/// is used.
		/// </summary>
		public string Region { get; set; }

		/// <summary>
		/// The maximum size (in bytes) of the image to return.
		/// </summary>
		public int SizeMax { get; set; }

		/// <summary>
		/// The minimum size (in bytes) of the image to return.
		/// </summary>
		public int SizeMin { get; set; }

		/// <summary>
		/// Order the results in either `asc` or `desc`.
		/// </summary>
		public string SortDirection { get; set; }

		/// <summary>
		/// Sort images based on a certain key. Defaults to `name`.
		/// </summary>
		public string SortKey { get; set; }

		/// <summary>
		/// Search for images with a specific tag.
		/// </summary>
		public string Tag { get; set; }

		/// <summary>
		/// The visibility of the image. Must be one of
		/// "public", "private", "community", or "shared". Defaults to "private".
		/// </summary>
		public string Visibility { get; set; }

	} // GetImageArgs

	/// <summary>
	/// A collection of values returned by getImage.
	/// </summary>
	public struct GetImageResult {
		/// <summary>
		/// The checksum of the data associated with the image.
		/// </summary>
		public string Checksum { get; set; }

		public string ContainerFormat { get; set; }

		public string DiskFormat { get; set; }

		/// <summary>
		/// the trailing path after the glance endpoint that represent the
		/// location of the image or the path to retrieve it.
		/// </summary>
		public string File { get; set; }

		/// <summary>
		/// The metadata associated with the image.
		/// Image metadata allow for meaningfully define the image properties
		/// and tags. See http://docs.openstack.org/developer/glance/metadefs-concepts.html.
		/// </summary>
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }

		/// <summary>
		/// The minimum amount of disk space required to use the image.
		/// </summary>
		public int MinDiskGb { get; set; }

		/// <summary>
		/// The minimum amount of ram required to use the image.
		/// </summary>
		public int MinRamMb { get; set; }

		/// <summary>
		/// Whether or not the image is protected.
		/// </summary>
		public bool Protected { get; set; }

		public string Region { get; set; }

		/// <summary>
		/// The path to the JSON-schema that represent
		/// the image or image
		/// </summary>
		public string Schema { get; set; }

		/// <summary>
		/// The size of the image (in bytes).
		/// </summary>
		public int SizeBytes { get; set; }

		public string UpdatedAt { get; set; }

		/// <summary>
		/// id is the provider-assigned unique ID for this managed resource.
		/// </summary>
		public string Id { get; set; }

	} // GetImageResult

	public static partial class ImagesModule {
		/// <summary>
		/// Use this data source to get the ID of an available OpenStack image.
		/// </summary>
		public static System.Threading.Tasks.Task<GetImageResult> GetImage(GetImageArgs args, Pulumi.InvokeOptions opts = default(Pulumi.InvokeOptions)) {
			var invokeArgs = new Google.Protobuf.WellKnownTypes.Struct();
			invokeArgs.Fields["memberStatus"] = Protobuf.ToProtobuf(args.MemberStatus);
			invokeArgs.Fields["mostRecent"] = Protobuf.ToProtobuf(args.MostRecent);
			invokeArgs.Fields["name"] = Protobuf.ToProtobuf(args.Name);
			invokeArgs.Fields["owner"] = Protobuf.ToProtobuf(args.Owner);
			invokeArgs.Fields["properties"] = Protobuf.ToProtobuf(args.Properties);
			invokeArgs.Fields["region"] = Protobuf.ToProtobuf(args.Region);
			invokeArgs.Fields["sizeMax"] = Protobuf.ToProtobuf(args.SizeMax);
			invokeArgs.Fields["sizeMin"] = Protobuf.ToProtobuf(args.SizeMin);
			invokeArgs.Fields["sortDirection"] = Protobuf.ToProtobuf(args.SortDirection);
			invokeArgs.Fields["sortKey"] = Protobuf.ToProtobuf(args.SortKey);
			invokeArgs.Fields["tag"] = Protobuf.ToProtobuf(args.Tag);
			invokeArgs.Fields["visibility"] = Protobuf.ToProtobuf(args.Visibility);

			var task = Pulumi.Runtime.InvokeAsync("openstack:images/getImage:getImage", invokeArgs, opts);

			return task.ContinueWith(response => {
				var protobuf = response.Result;
				var result = new GetImageResult();
				if (protobuf.Fields.ContainsKey("checksum")) {
					result.Checksum = Protobuf.ToString(protobuf.Fields["checksum"]);
				}
				if (protobuf.Fields.ContainsKey("containerFormat")) {
					result.ContainerFormat = Protobuf.ToString(protobuf.Fields["containerFormat"]);
				}
				if (protobuf.Fields.ContainsKey("diskFormat")) {
					result.DiskFormat = Protobuf.ToString(protobuf.Fields["diskFormat"]);
				}
				if (protobuf.Fields.ContainsKey("file")) {
					result.File = Protobuf.ToString(protobuf.Fields["file"]);
				}
				if (protobuf.Fields.ContainsKey("metadata")) {
					result.Metadata = Protobuf.ToMap(protobuf.Fields["metadata"]);
				}
				if (protobuf.Fields.ContainsKey("minDiskGb")) {
					result.MinDiskGb = Protobuf.ToInt(protobuf.Fields["minDiskGb"]);
				}
				if (protobuf.Fields.ContainsKey("minRamMb")) {
					result.MinRamMb = Protobuf.ToInt(protobuf.Fields["minRamMb"]);
				}
				if (protobuf.Fields.ContainsKey("protected")) {
					result.Protected = Protobuf.ToBool(protobuf.Fields["protected"]);
				}
				if (protobuf.Fields.ContainsKey("region")) {
					result.Region = Protobuf.ToString(protobuf.Fields["region"]);
				}
				if (protobuf.Fields.ContainsKey("schema")) {
					result.Schema = Protobuf.ToString(protobuf.Fields["schema"]);
				}
				if (protobuf.Fields.ContainsKey("sizeBytes")) {
					result.SizeBytes = Protobuf.ToInt(protobuf.Fields["sizeBytes"]);
				}
				if (protobuf.Fields.ContainsKey("updatedAt")) {
					result.UpdatedAt = Protobuf.ToString(protobuf.Fields["updatedAt"]);
				}
				if (protobuf.Fields.ContainsKey("id")) {
					result.Id = Protobuf.ToString(protobuf.Fields["id"]);
				}
				return result;
			});
		} // GetImage

	} // ImagesModule
} // Pulumi.Openstack.Images
