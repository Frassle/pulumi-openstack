// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Openstack.Blockstorage {

	/// <summary>
	/// The set of arguments for constructing a VolumeAttach resource.
	/// </summary>
	public struct VolumeAttachArgs {
		/// <summary>
		/// Specify whether to attach the volume as Read-Only
		/// (`ro`) or Read-Write (`rw`). Only values of `ro` and `rw` are accepted.
		/// If left unspecified, the Block Storage API will apply a default of `rw`.
		/// </summary>
		public Pulumi.IO<string> AttachMode { get; set; }

		/// <summary>
		/// The device to tell the Block Storage service this
		/// volume will be attached as. This is purely for informational purposes.
		/// You can specify `auto` or a device such as `/dev/vdc`.
		/// </summary>
		public Pulumi.IO<string> Device { get; set; }

		/// <summary>
		/// The host to attach the volume to.
		/// </summary>
		public Pulumi.IO<string> HostName { get; set; }

		/// <summary>
		/// The iSCSI initiator string to make the connection.
		/// </summary>
		public Pulumi.IO<string> Initiator { get; set; }

		/// <summary>
		/// The IP address of the `host_name` above.
		/// </summary>
		public Pulumi.IO<string> IpAddress { get; set; }

		/// <summary>
		/// Whether to connect to this volume via multipath.
		/// </summary>
		public Pulumi.IO<bool> Multipath { get; set; }

		/// <summary>
		/// The iSCSI initiator OS type.
		/// </summary>
		public Pulumi.IO<string> OsType { get; set; }

		/// <summary>
		/// The iSCSI initiator platform.
		/// </summary>
		public Pulumi.IO<string> Platform { get; set; }

		/// <summary>
		/// The region in which to obtain the V3 Block Storage
		/// client. A Block Storage client is needed to create a volume attachment.
		/// If omitted, the `region` argument of the provider is used. Changing this
		/// creates a new volume attachment.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// The ID of the Volume to attach to an Instance.
		/// </summary>
		public Pulumi.IO<string> VolumeId { get; set; }

		/// <summary>
		/// A wwnn name. Used for Fibre Channel connections.
		/// </summary>
		public Pulumi.IO<string> Wwnn { get; set; }

		/// <summary>
		/// An array of wwpn strings. Used for Fibre Channel
		/// connections.
		/// </summary>
		public Pulumi.IO<Pulumi.IO<string>[]> Wwpns { get; set; }

	} // VolumeAttachArgs

	/// <summary>
	/// This resource is experimental and may be removed in the future! Feedback
	/// is requested if you find this resource useful or if you find any problems
	/// with it.
	/// 
	/// Creates a general purpose attachment connection to a Block
	/// Storage volume using the OpenStack Block Storage (Cinder) v3 API.
	/// Depending on your Block Storage service configuration, this
	/// resource can assist in attaching a volume to a non-OpenStack resource
	/// such as a bare-metal server or a remote virtual machine in a
	/// different cloud provider.
	/// 
	/// This does not actually attach a volume to an instance. Please use
	/// the `openstack_compute_volume_attach_v3` resource for that.
	/// </summary>
	public class VolumeAttach : Pulumi.CustomResource {
		/// <summary>
		/// Specify whether to attach the volume as Read-Only
		/// (`ro`) or Read-Write (`rw`). Only values of `ro` and `rw` are accepted.
		/// If left unspecified, the Block Storage API will apply a default of `rw`.
		/// </summary>
		public Pulumi.IO<string> AttachMode { get; set; }

		/// <summary>
		/// This is a map of key/value pairs that contain the connection
		/// information. You will want to pass this information to a provisioner
		/// script to finalize the connection. See below for more information.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> Data { get; set; }

		/// <summary>
		/// The device to tell the Block Storage service this
		/// volume will be attached as. This is purely for informational purposes.
		/// You can specify `auto` or a device such as `/dev/vdc`.
		/// </summary>
		public Pulumi.IO<string> Device { get; set; }

		/// <summary>
		/// The storage driver that the volume is based on.
		/// </summary>
		public Pulumi.IO<string> DriverVolumeType { get; set; }

		/// <summary>
		/// The host to attach the volume to.
		/// </summary>
		public Pulumi.IO<string> HostName { get; set; }

		/// <summary>
		/// The iSCSI initiator string to make the connection.
		/// </summary>
		public Pulumi.IO<string> Initiator { get; set; }

		/// <summary>
		/// The IP address of the `host_name` above.
		/// </summary>
		public Pulumi.IO<string> IpAddress { get; set; }

		/// <summary>
		/// A mount point base name for shared storage.
		/// </summary>
		public Pulumi.IO<string> MountPointBase { get; set; }

		/// <summary>
		/// Whether to connect to this volume via multipath.
		/// </summary>
		public Pulumi.IO<bool> Multipath { get; set; }

		/// <summary>
		/// The iSCSI initiator OS type.
		/// </summary>
		public Pulumi.IO<string> OsType { get; set; }

		/// <summary>
		/// The iSCSI initiator platform.
		/// </summary>
		public Pulumi.IO<string> Platform { get; set; }

		/// <summary>
		/// The region in which to obtain the V3 Block Storage
		/// client. A Block Storage client is needed to create a volume attachment.
		/// If omitted, the `region` argument of the provider is used. Changing this
		/// creates a new volume attachment.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// The ID of the Volume to attach to an Instance.
		/// </summary>
		public Pulumi.IO<string> VolumeId { get; set; }

		/// <summary>
		/// A wwnn name. Used for Fibre Channel connections.
		/// </summary>
		public Pulumi.IO<string> Wwnn { get; set; }

		/// <summary>
		/// An array of wwpn strings. Used for Fibre Channel
		/// connections.
		/// </summary>
		public Pulumi.IO<string[]> Wwpns { get; set; }

		public VolumeAttach(string name, VolumeAttachArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("openstack:blockstorage/volumeAttach:VolumeAttach", name, SerialiseArgs(args), opts) {
			AttachMode = Outputs["attachMode"].Select(item => Protobuf.ToString(item));
			Device = Outputs["device"].Select(item => Protobuf.ToString(item));
			HostName = Outputs["hostName"].Select(item => Protobuf.ToString(item));
			Initiator = Outputs["initiator"].Select(item => Protobuf.ToString(item));
			IpAddress = Outputs["ipAddress"].Select(item => Protobuf.ToString(item));
			Multipath = Outputs["multipath"].Select(item => Protobuf.ToBool(item));
			OsType = Outputs["osType"].Select(item => Protobuf.ToString(item));
			Platform = Outputs["platform"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			VolumeId = Outputs["volumeId"].Select(item => Protobuf.ToString(item));
			Wwnn = Outputs["wwnn"].Select(item => Protobuf.ToString(item));
			Wwpns = Outputs["wwpns"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			AttachMode = Outputs["attachMode"].Select(item => Protobuf.ToString(item));
			Data = Outputs["data"].Select(item => Protobuf.ToMap(item));
			Device = Outputs["device"].Select(item => Protobuf.ToString(item));
			DriverVolumeType = Outputs["driverVolumeType"].Select(item => Protobuf.ToString(item));
			HostName = Outputs["hostName"].Select(item => Protobuf.ToString(item));
			Initiator = Outputs["initiator"].Select(item => Protobuf.ToString(item));
			IpAddress = Outputs["ipAddress"].Select(item => Protobuf.ToString(item));
			MountPointBase = Outputs["mountPointBase"].Select(item => Protobuf.ToString(item));
			Multipath = Outputs["multipath"].Select(item => Protobuf.ToBool(item));
			OsType = Outputs["osType"].Select(item => Protobuf.ToString(item));
			Platform = Outputs["platform"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			VolumeId = Outputs["volumeId"].Select(item => Protobuf.ToString(item));
			Wwnn = Outputs["wwnn"].Select(item => Protobuf.ToString(item));
			Wwpns = Outputs["wwpns"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(VolumeAttachArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["attachMode"] = Protobuf.ToProtobuf(args.AttachMode);
			props["device"] = Protobuf.ToProtobuf(args.Device);
			props["hostName"] = Protobuf.ToProtobuf(args.HostName);
			props["initiator"] = Protobuf.ToProtobuf(args.Initiator);
			props["ipAddress"] = Protobuf.ToProtobuf(args.IpAddress);
			props["multipath"] = Protobuf.ToProtobuf(args.Multipath);
			props["osType"] = Protobuf.ToProtobuf(args.OsType);
			props["platform"] = Protobuf.ToProtobuf(args.Platform);
			props["region"] = Protobuf.ToProtobuf(args.Region);
			props["volumeId"] = Protobuf.ToProtobuf(args.VolumeId);
			props["wwnn"] = Protobuf.ToProtobuf(args.Wwnn);
			props["wwpns"] = Protobuf.ToProtobuf(args.Wwpns, item => Protobuf.ToProtobuf(item));
			props["data"] = null; //out
			props["driverVolumeType"] = null; //out
			props["mountPointBase"] = null; //out
			return props;
		} // SerialiseArgs

	} // VolumeAttach
} // Pulumi.Openstack.Blockstorage
