// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Openstack.Vpnaas {

	/// <summary>
	/// The set of arguments for constructing a Service resource.
	/// </summary>
	public struct ServiceArgs {
		/// <summary>
		/// The administrative state of the resource. Can either be up(true) or down(false).
		/// Changing this updates the administrative state of the existing service.
		/// </summary>
		public Pulumi.IO<bool> AdminStateUp { get; set; }

		/// <summary>
		/// The human-readable description for the service.
		/// Changing this updates the description of the existing service.
		/// </summary>
		public Pulumi.IO<string> Description { get; set; }

		/// <summary>
		/// The name of the service. Changing this updates the name of
		/// the existing service.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Networking client.
		/// A Networking client is needed to create a VPN service. If omitted, the
		/// `region` argument of the provider is used. Changing this creates a new
		/// service.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// The ID of the router. Changing this creates a new service.
		/// </summary>
		public Pulumi.IO<string> RouterId { get; set; }

		/// <summary>
		/// SubnetID is the ID of the subnet. Default is null.
		/// </summary>
		public Pulumi.IO<string> SubnetId { get; set; }

		/// <summary>
		/// The owner of the service. Required if admin wants to
		/// create a service for another project. Changing this creates a new service.
		/// </summary>
		public Pulumi.IO<string> TenantId { get; set; }

		/// <summary>
		/// Map of additional options.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> ValueSpecs { get; set; }

	} // ServiceArgs

	/// <summary>
	/// Manages a V2 Neutron VPN service resource within OpenStack.
	/// </summary>
	public class Service : Pulumi.CustomResource {
		/// <summary>
		/// The administrative state of the resource. Can either be up(true) or down(false).
		/// Changing this updates the administrative state of the existing service.
		/// </summary>
		public Pulumi.IO<bool> AdminStateUp { get; set; }

		/// <summary>
		/// The human-readable description for the service.
		/// Changing this updates the description of the existing service.
		/// </summary>
		public Pulumi.IO<string> Description { get; set; }

		/// <summary>
		/// The read-only external (public) IPv4 address that is used for the VPN service.
		/// </summary>
		public Pulumi.IO<string> ExternalV4Ip { get; set; }

		/// <summary>
		/// The read-only external (public) IPv6 address that is used for the VPN service.
		/// </summary>
		public Pulumi.IO<string> ExternalV6Ip { get; set; }

		/// <summary>
		/// The name of the service. Changing this updates the name of
		/// the existing service.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Networking client.
		/// A Networking client is needed to create a VPN service. If omitted, the
		/// `region` argument of the provider is used. Changing this creates a new
		/// service.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// The ID of the router. Changing this creates a new service.
		/// </summary>
		public Pulumi.IO<string> RouterId { get; set; }

		/// <summary>
		/// Indicates whether IPsec VPN service is currently operational. Values are ACTIVE, DOWN, BUILD, ERROR, PENDING_CREATE, PENDING_UPDATE, or PENDING_DELETE.
		/// </summary>
		public Pulumi.IO<string> Status { get; set; }

		/// <summary>
		/// SubnetID is the ID of the subnet. Default is null.
		/// </summary>
		public Pulumi.IO<string> SubnetId { get; set; }

		/// <summary>
		/// The owner of the service. Required if admin wants to
		/// create a service for another project. Changing this creates a new service.
		/// </summary>
		public Pulumi.IO<string> TenantId { get; set; }

		/// <summary>
		/// Map of additional options.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> ValueSpecs { get; set; }

		public Service(string name, ServiceArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("openstack:vpnaas/service:Service", name, SerialiseArgs(args), opts) {
			AdminStateUp = Outputs["adminStateUp"].Select(item => Protobuf.ToBool(item));
			Description = Outputs["description"].Select(item => Protobuf.ToString(item));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			RouterId = Outputs["routerId"].Select(item => Protobuf.ToString(item));
			SubnetId = Outputs["subnetId"].Select(item => Protobuf.ToString(item));
			TenantId = Outputs["tenantId"].Select(item => Protobuf.ToString(item));
			ValueSpecs = Outputs["valueSpecs"].Select(item => Protobuf.ToMap(item));
			AdminStateUp = Outputs["adminStateUp"].Select(item => Protobuf.ToBool(item));
			Description = Outputs["description"].Select(item => Protobuf.ToString(item));
			ExternalV4Ip = Outputs["externalV4Ip"].Select(item => Protobuf.ToString(item));
			ExternalV6Ip = Outputs["externalV6Ip"].Select(item => Protobuf.ToString(item));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			RouterId = Outputs["routerId"].Select(item => Protobuf.ToString(item));
			Status = Outputs["status"].Select(item => Protobuf.ToString(item));
			SubnetId = Outputs["subnetId"].Select(item => Protobuf.ToString(item));
			TenantId = Outputs["tenantId"].Select(item => Protobuf.ToString(item));
			ValueSpecs = Outputs["valueSpecs"].Select(item => Protobuf.ToMap(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(ServiceArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["adminStateUp"] = Protobuf.ToProtobuf(args.AdminStateUp);
			props["description"] = Protobuf.ToProtobuf(args.Description);
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["region"] = Protobuf.ToProtobuf(args.Region);
			props["routerId"] = Protobuf.ToProtobuf(args.RouterId);
			props["subnetId"] = Protobuf.ToProtobuf(args.SubnetId);
			props["tenantId"] = Protobuf.ToProtobuf(args.TenantId);
			props["valueSpecs"] = Protobuf.ToProtobuf(args.ValueSpecs);
			props["externalV4Ip"] = null; //out
			props["externalV6Ip"] = null; //out
			props["status"] = null; //out
			return props;
		} // SerialiseArgs

	} // Service
} // Pulumi.Openstack.Vpnaas
