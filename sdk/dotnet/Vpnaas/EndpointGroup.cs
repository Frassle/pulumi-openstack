// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Openstack.Vpnaas {

	/// <summary>
	/// The set of arguments for constructing a EndpointGroup resource.
	/// </summary>
	public struct EndpointGroupArgs {
		/// <summary>
		/// The human-readable description for the group.
		/// Changing this updates the description of the existing group.
		/// </summary>
		public Pulumi.IO<string> Description { get; set; }

		/// <summary>
		/// List of endpoints of the same type, for the endpoint group. The values will depend on the type.
		/// Changing this creates a new group.
		/// </summary>
		public Pulumi.IO<Pulumi.IO<string>[]> Endpoints { get; set; }

		/// <summary>
		/// The name of the group. Changing this updates the name of
		/// the existing group.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Networking client.
		/// A Networking client is needed to create an endpoint group. If omitted, the
		/// `region` argument of the provider is used. Changing this creates a new
		/// group.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// The owner of the group. Required if admin wants to
		/// create an endpoint group for another project. Changing this creates a new group.
		/// </summary>
		public Pulumi.IO<string> TenantId { get; set; }

		/// <summary>
		/// The type of the endpoints in the group. A valid value is subnet, cidr, network, router, or vlan.
		/// Changing this creates a new group.
		/// </summary>
		public Pulumi.IO<string> Type { get; set; }

		/// <summary>
		/// Map of additional options.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> ValueSpecs { get; set; }

	} // EndpointGroupArgs

	/// <summary>
	/// Manages a V2 Neutron Endpoint Group resource within OpenStack.
	/// </summary>
	public class EndpointGroup : Pulumi.CustomResource {
		/// <summary>
		/// The human-readable description for the group.
		/// Changing this updates the description of the existing group.
		/// </summary>
		public Pulumi.IO<string> Description { get; set; }

		/// <summary>
		/// List of endpoints of the same type, for the endpoint group. The values will depend on the type.
		/// Changing this creates a new group.
		/// </summary>
		public Pulumi.IO<string[]> Endpoints { get; set; }

		/// <summary>
		/// The name of the group. Changing this updates the name of
		/// the existing group.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Networking client.
		/// A Networking client is needed to create an endpoint group. If omitted, the
		/// `region` argument of the provider is used. Changing this creates a new
		/// group.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// The owner of the group. Required if admin wants to
		/// create an endpoint group for another project. Changing this creates a new group.
		/// </summary>
		public Pulumi.IO<string> TenantId { get; set; }

		/// <summary>
		/// The type of the endpoints in the group. A valid value is subnet, cidr, network, router, or vlan.
		/// Changing this creates a new group.
		/// </summary>
		public Pulumi.IO<string> Type { get; set; }

		/// <summary>
		/// Map of additional options.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> ValueSpecs { get; set; }

		public EndpointGroup(string name, EndpointGroupArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("openstack:vpnaas/endpointGroup:EndpointGroup", name, SerialiseArgs(args), opts) {
			Description = Outputs["description"].Select(item => Protobuf.ToString(item));
			Endpoints = Outputs["endpoints"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			TenantId = Outputs["tenantId"].Select(item => Protobuf.ToString(item));
			Type = Outputs["type"].Select(item => Protobuf.ToString(item));
			ValueSpecs = Outputs["valueSpecs"].Select(item => Protobuf.ToMap(item));
			Description = Outputs["description"].Select(item => Protobuf.ToString(item));
			Endpoints = Outputs["endpoints"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			TenantId = Outputs["tenantId"].Select(item => Protobuf.ToString(item));
			Type = Outputs["type"].Select(item => Protobuf.ToString(item));
			ValueSpecs = Outputs["valueSpecs"].Select(item => Protobuf.ToMap(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(EndpointGroupArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["description"] = Protobuf.ToProtobuf(args.Description);
			props["endpoints"] = Protobuf.ToProtobuf(args.Endpoints, item => Protobuf.ToProtobuf(item));
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["region"] = Protobuf.ToProtobuf(args.Region);
			props["tenantId"] = Protobuf.ToProtobuf(args.TenantId);
			props["type"] = Protobuf.ToProtobuf(args.Type);
			props["valueSpecs"] = Protobuf.ToProtobuf(args.ValueSpecs);
			return props;
		} // SerialiseArgs

	} // EndpointGroup
} // Pulumi.Openstack.Vpnaas
