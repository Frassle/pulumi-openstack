// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Openstack.Vpnaas {

	public sealed class IkePolicyArgsLifetime : Pulumi.IIOProtobuf {
		public Pulumi.IO<string> Units { get; set; }
		public Pulumi.IO<int> Value { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Pulumi.Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("units", Protobuf.ToProtobuf(Units)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("value", Protobuf.ToProtobuf(Value)));
		} // ToProtobuf

	} // IkePolicyArgsLifetime

	public sealed class IkePolicyLifetime : Pulumi.IIOProtobuf {
		public Pulumi.IO<string> Units { get; set; }
		public Pulumi.IO<int> Value { get; set; }

		public Pulumi.IO<Google.Protobuf.WellKnownTypes.Value> ToProtobuf() {
			return Pulumi.Protobuf.ToProtobuf(
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("units", Protobuf.ToProtobuf(Units)),
				new KeyValuePair<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>("value", Protobuf.ToProtobuf(Value)));
		} // ToProtobuf

		public static IkePolicyLifetime FromProtobuf(Google.Protobuf.WellKnownTypes.Value value) {
			var obj = value.StructValue;
			return new IkePolicyLifetime() {
				Units = Protobuf.ToString(obj.Fields["units"]),
				Value = Protobuf.ToInt(obj.Fields["value"]),
			};
		} // FromProtobuf

	} // IkePolicyLifetime

	/// <summary>
	/// The set of arguments for constructing a IkePolicy resource.
	/// </summary>
	public struct IkePolicyArgs {
		/// <summary>
		/// The authentication hash algorithm. Valid values are sha1, sha256, sha384, sha512.
		/// Default is sha1. Changing this updates the algorithm of the existing policy.
		/// </summary>
		public Pulumi.IO<string> AuthAlgorithm { get; set; }

		/// <summary>
		/// The human-readable description for the policy.
		/// Changing this updates the description of the existing policy.
		/// </summary>
		public Pulumi.IO<string> Description { get; set; }

		/// <summary>
		/// The encryption algorithm. Valid values are 3des, aes-128, aes-192 and so on.
		/// The default value is aes-128. Changing this updates the existing policy.
		/// </summary>
		public Pulumi.IO<string> EncryptionAlgorithm { get; set; }

		/// <summary>
		/// The IKE mode. A valid value is v1 or v2. Default is v1.
		/// Changing this updates the existing policy.
		/// </summary>
		public Pulumi.IO<string> IkeVersion { get; set; }

		/// <summary>
		/// The lifetime of the security association. Consists of Unit and Value.
		/// - `unit` - (Optional) The units for the lifetime of the security association. Can be either seconds or kilobytes.
		/// Default is seconds.
		/// - `value` - (Optional) The value for the lifetime of the security association. Must be a positive integer.
		/// Default is 3600.
		/// </summary>
		public Pulumi.IO<Pulumi.IO<IkePolicyArgsLifetime>[]> Lifetimes { get; set; }

		/// <summary>
		/// The name of the policy. Changing this updates the name of
		/// the existing policy.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The perfect forward secrecy mode. Valid values are Group2, Group5 and Group14. Default is Group5.
		/// Changing this updates the existing policy.
		/// </summary>
		public Pulumi.IO<string> Pfs { get; set; }

		/// <summary>
		/// The IKE mode. A valid value is main, which is the default.
		/// Changing this updates the existing policy.
		/// </summary>
		public Pulumi.IO<string> Phase1NegotiationMode { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Networking client.
		/// A Networking client is needed to create a VPN service. If omitted, the
		/// `region` argument of the provider is used. Changing this creates a new
		/// service.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// The owner of the policy. Required if admin wants to
		/// create a service for another policy. Changing this creates a new policy.
		/// </summary>
		public Pulumi.IO<string> TenantId { get; set; }

		/// <summary>
		/// Map of additional options.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> ValueSpecs { get; set; }

	} // IkePolicyArgs

	/// <summary>
	/// Manages a V2 Neutron IKE policy resource within OpenStack.
	/// </summary>
	public class IkePolicy : Pulumi.CustomResource {
		/// <summary>
		/// The authentication hash algorithm. Valid values are sha1, sha256, sha384, sha512.
		/// Default is sha1. Changing this updates the algorithm of the existing policy.
		/// </summary>
		public Pulumi.IO<string> AuthAlgorithm { get; set; }

		/// <summary>
		/// The human-readable description for the policy.
		/// Changing this updates the description of the existing policy.
		/// </summary>
		public Pulumi.IO<string> Description { get; set; }

		/// <summary>
		/// The encryption algorithm. Valid values are 3des, aes-128, aes-192 and so on.
		/// The default value is aes-128. Changing this updates the existing policy.
		/// </summary>
		public Pulumi.IO<string> EncryptionAlgorithm { get; set; }

		/// <summary>
		/// The IKE mode. A valid value is v1 or v2. Default is v1.
		/// Changing this updates the existing policy.
		/// </summary>
		public Pulumi.IO<string> IkeVersion { get; set; }

		/// <summary>
		/// The lifetime of the security association. Consists of Unit and Value.
		/// - `unit` - (Optional) The units for the lifetime of the security association. Can be either seconds or kilobytes.
		/// Default is seconds.
		/// - `value` - (Optional) The value for the lifetime of the security association. Must be a positive integer.
		/// Default is 3600.
		/// </summary>
		public Pulumi.IO<IkePolicyLifetime[]> Lifetimes { get; set; }

		/// <summary>
		/// The name of the policy. Changing this updates the name of
		/// the existing policy.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The perfect forward secrecy mode. Valid values are Group2, Group5 and Group14. Default is Group5.
		/// Changing this updates the existing policy.
		/// </summary>
		public Pulumi.IO<string> Pfs { get; set; }

		/// <summary>
		/// The IKE mode. A valid value is main, which is the default.
		/// Changing this updates the existing policy.
		/// </summary>
		public Pulumi.IO<string> Phase1NegotiationMode { get; set; }

		/// <summary>
		/// The region in which to obtain the V2 Networking client.
		/// A Networking client is needed to create a VPN service. If omitted, the
		/// `region` argument of the provider is used. Changing this creates a new
		/// service.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// The owner of the policy. Required if admin wants to
		/// create a service for another policy. Changing this creates a new policy.
		/// </summary>
		public Pulumi.IO<string> TenantId { get; set; }

		/// <summary>
		/// Map of additional options.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> ValueSpecs { get; set; }

		public IkePolicy(string name, IkePolicyArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("openstack:vpnaas/ikePolicy:IkePolicy", name, SerialiseArgs(args), opts) {
			AuthAlgorithm = Outputs["authAlgorithm"].Select(item => Protobuf.ToString(item));
			Description = Outputs["description"].Select(item => Protobuf.ToString(item));
			EncryptionAlgorithm = Outputs["encryptionAlgorithm"].Select(item => Protobuf.ToString(item));
			IkeVersion = Outputs["ikeVersion"].Select(item => Protobuf.ToString(item));
			Lifetimes = Outputs["lifetimes"].Select(item => Protobuf.ToList(item, item1 => IkePolicyLifetime.FromProtobuf(item1)));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Pfs = Outputs["pfs"].Select(item => Protobuf.ToString(item));
			Phase1NegotiationMode = Outputs["phase1NegotiationMode"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			TenantId = Outputs["tenantId"].Select(item => Protobuf.ToString(item));
			ValueSpecs = Outputs["valueSpecs"].Select(item => Protobuf.ToMap(item));
			AuthAlgorithm = Outputs["authAlgorithm"].Select(item => Protobuf.ToString(item));
			Description = Outputs["description"].Select(item => Protobuf.ToString(item));
			EncryptionAlgorithm = Outputs["encryptionAlgorithm"].Select(item => Protobuf.ToString(item));
			IkeVersion = Outputs["ikeVersion"].Select(item => Protobuf.ToString(item));
			Lifetimes = Outputs["lifetimes"].Select(item => Protobuf.ToList(item, item1 => IkePolicyLifetime.FromProtobuf(item1)));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Pfs = Outputs["pfs"].Select(item => Protobuf.ToString(item));
			Phase1NegotiationMode = Outputs["phase1NegotiationMode"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			TenantId = Outputs["tenantId"].Select(item => Protobuf.ToString(item));
			ValueSpecs = Outputs["valueSpecs"].Select(item => Protobuf.ToMap(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(IkePolicyArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["authAlgorithm"] = Protobuf.ToProtobuf(args.AuthAlgorithm);
			props["description"] = Protobuf.ToProtobuf(args.Description);
			props["encryptionAlgorithm"] = Protobuf.ToProtobuf(args.EncryptionAlgorithm);
			props["ikeVersion"] = Protobuf.ToProtobuf(args.IkeVersion);
			props["lifetimes"] = Protobuf.ToProtobuf(args.Lifetimes, item => Protobuf.ToProtobuf(item));
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["pfs"] = Protobuf.ToProtobuf(args.Pfs);
			props["phase1NegotiationMode"] = Protobuf.ToProtobuf(args.Phase1NegotiationMode);
			props["region"] = Protobuf.ToProtobuf(args.Region);
			props["tenantId"] = Protobuf.ToProtobuf(args.TenantId);
			props["valueSpecs"] = Protobuf.ToProtobuf(args.ValueSpecs);
			return props;
		} // SerialiseArgs

	} // IkePolicy
} // Pulumi.Openstack.Vpnaas
