// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Linq;

namespace Pulumi.Openstack.Firewall {

	/// <summary>
	/// The set of arguments for constructing a Policy resource.
	/// </summary>
	public struct PolicyArgs {
		/// <summary>
		/// Audit status of the firewall policy
		/// (must be "true" or "false" if provided - defaults to "false").
		/// This status is set to "false" whenever the firewall policy or any of its
		/// rules are changed. Changing this updates the `audited` status of an existing
		/// firewall policy.
		/// </summary>
		public Pulumi.IO<bool> Audited { get; set; }

		/// <summary>
		/// A description for the firewall policy. Changing
		/// this updates the `description` of an existing firewall policy.
		/// </summary>
		public Pulumi.IO<string> Description { get; set; }

		/// <summary>
		/// A name for the firewall policy. Changing this
		/// updates the `name` of an existing firewall policy.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The region in which to obtain the v1 networking client.
		/// A networking client is needed to create a firewall policy. If omitted, the
		/// `region` argument of the provider is used. Changing this creates a new
		/// firewall policy.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// An array of one or more firewall rules that comprise
		/// the policy. Changing this results in adding/removing rules from the
		/// existing firewall policy.
		/// </summary>
		public Pulumi.IO<Pulumi.IO<string>[]> Rules { get; set; }

		/// <summary>
		/// Sharing status of the firewall policy (must be "true"
		/// or "false" if provided). If this is "true" the policy is visible to, and
		/// can be used in, firewalls in other tenants. Changing this updates the
		/// `shared` status of an existing firewall policy. Only administrative users
		/// can specify if the policy should be shared.
		/// </summary>
		public Pulumi.IO<bool> Shared { get; set; }

		public Pulumi.IO<string> TenantId { get; set; }

		/// <summary>
		/// Map of additional options.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> ValueSpecs { get; set; }

	} // PolicyArgs

	/// <summary>
	/// Manages a v1 firewall policy resource within OpenStack.
	/// </summary>
	public class Policy : Pulumi.CustomResource {
		/// <summary>
		/// Audit status of the firewall policy
		/// (must be "true" or "false" if provided - defaults to "false").
		/// This status is set to "false" whenever the firewall policy or any of its
		/// rules are changed. Changing this updates the `audited` status of an existing
		/// firewall policy.
		/// </summary>
		public Pulumi.IO<bool> Audited { get; set; }

		/// <summary>
		/// A description for the firewall policy. Changing
		/// this updates the `description` of an existing firewall policy.
		/// </summary>
		public Pulumi.IO<string> Description { get; set; }

		/// <summary>
		/// A name for the firewall policy. Changing this
		/// updates the `name` of an existing firewall policy.
		/// </summary>
		public Pulumi.IO<string> Name { get; set; }

		/// <summary>
		/// The region in which to obtain the v1 networking client.
		/// A networking client is needed to create a firewall policy. If omitted, the
		/// `region` argument of the provider is used. Changing this creates a new
		/// firewall policy.
		/// </summary>
		public Pulumi.IO<string> Region { get; set; }

		/// <summary>
		/// An array of one or more firewall rules that comprise
		/// the policy. Changing this results in adding/removing rules from the
		/// existing firewall policy.
		/// </summary>
		public Pulumi.IO<string[]> Rules { get; set; }

		/// <summary>
		/// Sharing status of the firewall policy (must be "true"
		/// or "false" if provided). If this is "true" the policy is visible to, and
		/// can be used in, firewalls in other tenants. Changing this updates the
		/// `shared` status of an existing firewall policy. Only administrative users
		/// can specify if the policy should be shared.
		/// </summary>
		public Pulumi.IO<bool> Shared { get; set; }

		public Pulumi.IO<string> TenantId { get; set; }

		/// <summary>
		/// Map of additional options.
		/// </summary>
		public Pulumi.IO<System.Collections.Generic.Dictionary<string, string>> ValueSpecs { get; set; }

		public Policy(string name, PolicyArgs args, Pulumi.ResourceOptions opts = default(Pulumi.ResourceOptions))
			: base("openstack:firewall/policy:Policy", name, SerialiseArgs(args), opts) {
			Audited = Outputs["audited"].Select(item => Protobuf.ToBool(item));
			Description = Outputs["description"].Select(item => Protobuf.ToString(item));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			Rules = Outputs["rules"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			Shared = Outputs["shared"].Select(item => Protobuf.ToBool(item));
			TenantId = Outputs["tenantId"].Select(item => Protobuf.ToString(item));
			ValueSpecs = Outputs["valueSpecs"].Select(item => Protobuf.ToMap(item));
			Audited = Outputs["audited"].Select(item => Protobuf.ToBool(item));
			Description = Outputs["description"].Select(item => Protobuf.ToString(item));
			Name = Outputs["name"].Select(item => Protobuf.ToString(item));
			Region = Outputs["region"].Select(item => Protobuf.ToString(item));
			Rules = Outputs["rules"].Select(item => Protobuf.ToList(item, item1 => Protobuf.ToString(item1)));
			Shared = Outputs["shared"].Select(item => Protobuf.ToBool(item));
			TenantId = Outputs["tenantId"].Select(item => Protobuf.ToString(item));
			ValueSpecs = Outputs["valueSpecs"].Select(item => Protobuf.ToMap(item));
		} // ctor

		private static Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>> SerialiseArgs(PolicyArgs args) {
			var props = new Dictionary<string, Pulumi.IO<Google.Protobuf.WellKnownTypes.Value>>();
			props["audited"] = Protobuf.ToProtobuf(args.Audited);
			props["description"] = Protobuf.ToProtobuf(args.Description);
			props["name"] = Protobuf.ToProtobuf(args.Name);
			props["region"] = Protobuf.ToProtobuf(args.Region);
			props["rules"] = Protobuf.ToProtobuf(args.Rules, item => Protobuf.ToProtobuf(item));
			props["shared"] = Protobuf.ToProtobuf(args.Shared);
			props["tenantId"] = Protobuf.ToProtobuf(args.TenantId);
			props["valueSpecs"] = Protobuf.ToProtobuf(args.ValueSpecs);
			return props;
		} // SerialiseArgs

	} // Policy
} // Pulumi.Openstack.Firewall
